import streamlit as st
import pandas as pd
import numpy as np
import re
import time
from difflib import SequenceMatcher
import unicodedata
from service.preprocess import set_page_visuals
from service.fds import load_models, read_excel, read_parquets, split_df, get_ml_model, \
    get_pjp_suspected_blacklisted_greylisted
from datetime import datetime
from service.database import connect_db, get_pjp_jkt, get_blacklisted_country, get_greylisted_country, get_sus_peoples, \
    upload_df, get_user_logs_data, get_country_participated
from collections import Counter
import json

known_names = [
    "ABDUL HAQ WASIQ", "ABDUL-HAQ WASEEQ", "ABDUL-HAQ WASSIQ", "ATIQULLAH", "ATIQULLAH WALI MOHAMMAD",
    "AMIR MOHAMMAD", "MOHAMMAD SADIQ", "ABU AISYAH", "MUHAMMAD BAHRUN NAIM ANGGIH TAMTOMO",
    "MUHAMMAD BAHRUNNAIM", "NAIM", "BACHRUN NAIM", "ABU JANDAL", "SALIM MUBAROQ ATAMIMI",
    "SALIM PENCENG", "SALIM MUBARAK ATTAIMI", "ALI AHMAD KALORA", "ALI KALORA", "ALI AHMAD",
    "ABU MUHAMMAD AL-ANDUNISIY", "ABU MUHAMMAD AL-INDONESI", "ABU MUHAMMAD AL-INDUNISI",
    "ABU SHABRINA", "BACHRUMSHAH", "BACHRUMSYAH", "BAHRUMSYAH", "IBRAHIM ABU", "SYAH BAHRUM",
    "USMAN BACHRUMSYAH MENNOR", "ABU HAZA'", "ABU HAZZA'", "ABU SA'D", "ABU SUAD",
    "SA'D AL-SHARYAN AL-KA'BI", "SA'D BIN SA'D MUHAMMAD SHIRYAN AL-KA'BI",
    "SA'D SA'D MUHAMMAD SHIRYAN AL-KA'BI", "UMAR AL-AFGHANI", "SA'D BIN SA'D MUHAMMAD SHARIYAN AL-KA'BI",
    "ABD AL-AZIZ ADHAY ZIMIN AL-FADHLI", "ABD AL-AZIZ UDAI SAMIN AL-FADHL",
    "ABD AL-AZIZ UDAI SAMIN AL-FADHLI", "ABDALAZIZ AD'AI SAMIN FADHLI AL-FADHALI",
    "ABD AL-AZIZ ADAY ZIMIN AL-FADHIL", "IBRAHIM 'ISSA HAJI MUHAMMAD AL-BAKAR",
    "ABU-KHALIL", "IBRAHIM AL-BAKR", "IBRAHIM 'ISA HAJI AL-BAKR", "IBRAHIM 'ISSA AL-BAKAR",
    "IBRAHIM ISSA HIJJI MOHD ALBAKER", "IBRAHIM ISSA HIJJI MUHAMMAD AL-BAKER",
    "IBRAHIM 'ISA HAJJI MUHAMMAD AL-BAKR", "ASHRAF MUHAMMAD YUSIF 'ABD AL-SALAM",
    "ASHRAF MUHAMMAD YUSIF 'UTHMAN 'ABD AL-SALAM", "ASHRAF MUHAMMAD YUSUF 'ABD-AL-SALAM",
    "IBN AL-KHATTAB", "KHATTAB", "ASHRAF MUHAMMAD YUSUF 'UTHMAN 'ABD AL-SALAM",
    "A. RAHMAN AL-NAIMI", "A. RAHMAN OMAIR J ALNAIMI", "'ABD AL-RAHMAN AL-NU'AIMI",
    "'ABD AL-RAHMAN AL-NUA'YMI", "ABD AL-RAHMAN BIN 'AMIR AL-NA'IMI",
    "'ABD AL-RAHMAN BIN 'AMIR AL-NU'AYMI", "'ABD AL-RAHMAN BIN 'AMIR AL-NU'IMI",
    "'ABDALLAH MUHAMMAD AL-NU'AYMI", "ABDELRAHMAN IMER AL JABER AL NAIMEH",
    "ABDULRAHMAN OMAIR AL NEAIMI", "ABD AL-RAHMAN BIN 'UMAYR AL-NU'AYMI",
    "JAM'IYAT AL TA'AWUN AL ISLAMIYYA", "JIT", "SOCIETY OF ISLAMIC COOPERATION",
    "JAM'YAH TA'AWUN AL-ISLAMIA", "BOKO HARAM", "JAMA'ATU AHLUS-SUNNA LIDDA'AWATI WAL JIHAD",
    "JAMA'ATU AHLUS-SUNNAH LIDDA'AWATI WAL JIHAD", "WESTERN EDUCATION IS A SIN",
    "JAMA'ATU AHLIS SUNNA LIDDA'AWATI WAL-JIHAD", "AL BIR AL DAWALIA", "BIF", "BIF-USA",
    "MEZHDUNARODNYJ BLAGOTVORITEL'NYL FOND", "BENEVOLENCE INTERNATIONAL FOUNDATION",
    "ANSARU", "ANSARUL MUSLIMINA FI BILADIS SUDAN",
    "JAMA'ATU ANSARIL MUSLIMINA FI BILADIS SUDAN (JAMBS)",
    "JAMA'ATU ANSARUL MUSLIMINA FI BILADIS-SUDAN (JAMBS)",
    "JAMMA'ATU ANSARUL MUSLIMINA FI BILADIS-SUDAN (JAMBS)",
    "VANGUARD FOR THE PROTECTION OF MUSLIMS IN BLACK AFRICA",
    "VANGUARDS FOR THE PROTECTION OF MUSLIMS IN BLACK AFRICA", "ANSARUL MUSLIMINA FI BILADIS SUDAN",
    "AL-QAIDA OF JIHAD IN THE LAND OF THE TWO RIVERS", "AL-TAWHID", "AL-ZARQAWI NETWORK", "AQI",
    "ISI", "ISLAMIC STATE IN IRAQ AND THE LEVANT", "ISLAMIC STATE OF IRAQ",
    "JAMA'AT AL-TAWHID WA'AL-JIHAD", "JTJ", "QAIDA OF THE JIHAD IN THE LAND OF THE TWO RIVERS",
    "TANZEEM QA'IDAT AL JIHAD/BILAD AL RAAFIDAINI", "TANZIM QA'IDAT AL-JIHAD FI BILAD AL-RAFIDAYN",
    "THE MONOTHEISM AND JIHAD GROUP", "THE ORGANIZATION BASE OF JIHAD/COUNTRY OF THE TWO RIVERS",
    "THE ORGANIZATION BASE OF JIHAD/MESOPOTAMIA",
    "THE ORGANIZATION OF JIHAD'S BASE IN THE COUNTRY OF THE TWO RIVERS", "AL-QAIDA IN IRAQ",
    "ABU-SA'ID AL BRITANI", "OMAR ALI HUSSAIN", "ABU-RAYHANAH",
    "ABU-RAYHANAH AL-'ANSARI AL-JEDDAWI", "HANDALAH", "RAYHANAH",
    "MU'TASSIM YAHYA 'ALI AL-RUMAYSH", "MERA'I", "RADI ABD EL SAMIE ABOU EL YAZID EL AYASHI",
    "ABU UBAYDAH", "BIN AL SHIBH, RAMZI", "BINALSHEIDAH, RAMZI MOHAMED ABDULLAH",
    "BINALSHIBH RAMSI MOHAMED ABDULLAH", "BINALSHIBH RAMZI MOHAMMED ABDULLAH",
    "MOHAMED ALI ABDULLAH BAWAZIR", "OMAR, RAMZI MOHAMED ABDELLAH",
    "RAMZI BINALSHIB", "RAMZI MOHAMED ABDELLAH OMAR HASSAN ALASSIRI", "RAMZI OMAR",
    "'UMAR MUHAMMAD 'ABDALLAH BA' AMAR", "RAMZI MOHAMED ABDULLAH BINALSHIBH",
    "ABU ABD AL-'AZIZ", "ABU ABDUL AZIZ", "BAHAZIQ MAHMOUD", "SHAYKH SAHIB",
    "MAHMOUD MOHAMMAD AHMED BAHAZIQ", "ABU MAJID SAMIYAH", "ABU SAMIA",
    "MUHSIN FADHIL 'AYYID AL FADHLI", "MUHSIN FADIL AYID A SHUR AL FADHLI",
    "MUHSIN FADHIL AYED ASHOUR AL-FADHLI", "ABDELMAJID AL-ZINDANI",
    "SHAYKH 'ABD AL-MAJID AL-ZINDANI", "SHEIKH ABD AL-MEGUID AL-ZANDANI",
    "ABD-AL-MAJID AZIZ AL-ZINDANI", "ABU BAKR AL-BAGHDADI",
    "ABU BAKR AL-BAGHDADI AL-HUSAYNI AL-QURAISHI", "ABU DUA'", "ABU DUAA'", "Dr. IBRAHIM",
    "Dr. IBRAHIM 'AWWAD IBRAHIM 'ALI AL-BADRI AL-SAMARRAI'",
    "IBRAHIM AWWAD IBRAHIM ALI AL-BADRI AL-SAMARRAI", "GHASSAN AL-TAJIKI",
    "'LI MANAHI 'ALI AL-MAHAYDALI AL-'UTAYBI", "MUHANNAD AL-NAJDI", "ABU AKRAM", "ABU KARIM",
    "ABU TUSNIN", "EL-SABABT", "HANI AL-SAYYID AL SIBA'I", "HANI AL-SAYYID AL-SABAI",
    "HANI AL-SAYYID EL SABAAY", "HANI AL-SAYYID EL SEBAI", "HANI EL SAYYED ELSEBAI YUSEF",
    "HANI YOUSEF AL-SEBAI", "HANI YOUSSEF", "HANI YUSEF", "HANY ELSAYED YOUSSEF", "HANY YOUSEFF",
    "HANI AL-SAYYID AL-SEBAI YUSIF", "IBRAHIM AL-MADANI", "MUHAMAD IBRAHIM MAKKAWI",
    "SAIF AL-'ADIL", "SAYF-AL ADL", "SEIF AL ADEL",
    "MOHAMMED SALAHALDIN ABD EL HALIM ZIDANE", "'ABD AL-HAQ", "ABDUL HEQ",
    "ABDUL HEQ JUNDULLAH", "ABDUL SAIMAITI", "ABUDU HAKE", "MAIMAITI IMAN",
    "MAIMAITIMING MAIMAITI", "MAIUMAITIMIN MAIMAITI", "MEMETIMING AXIMU",
    "MEMETIMING MEMETI", "MEMETIMING QEKEMAN", "MUHAMMAD AHMED KHALIQ", "MUHELISI", "QERMAN",
    "SAIFUDING", "ABDUL HAQ", "DOCTOR MUTHANNA AL-DARI",
    "DOCTOR MUTHANNA HARITH SULAYMAN AL DARI AL-ZAWBA'", "DR. MUTHANNA AL DARI",
    "DR. MUTHANNA HARITH AL-DARI AL-ZOWBAI", "MUTHANA HARIS AL-DARI", "MUTHANA HARIS AL-DHARI",
    "MUTHANA HARITH AL DARI", "MUTHANNA HARETH AL-DARI", "MUTHANNA HARETH AL-DHARI",
    "MUTHANNA HARITH SULAYMAN AL-DARI", "MUTHANNA HARITH SULAYMAN AL-DARI AL-ZAWBA'I",
    "MUTHANNA HARITH SULAYMAN AL-DARI AL-ZOBAI", "MUTHANNA HARITH SULAYMAN AL-DHARI",
    "MUTHANNA HARITH AL-DARI", "ABOSSLAH", "ABU SALEH", "ABU-SALAAH", "IBRAHIM AL-'ASIRI",
    "IBRAHIM HASAN TALEA ASEERI", "IBRAHIM HASAN TALI AL-'ASIRI", "IBRAHIM HASAN TALI ASIRI",
    "IBRAHIM HASAN TALI'A 'ASIRI", "IBRAHIM HASSAN AL ASIRI", "IBRAHIM HASSAN AL-ASIRI",
    "IBRAHIM HASSAN TALI ASIRI", "IBRAHIM HASSAN TALI ASSIRI", "IBRAHIM HASSAN TALI AL-ASIRI",
    "ABU SALIM", "Dr. HAMED ABDULLAH AL-ALI", "HAMED AL-'ALI", "HAMED BIN 'ABDALLAH AL-'ALI",
    "HAMID 'ABDALLAH AHMAD AL-'ALI", "HAMID ABDALLAH AHMED AL-ALI", "HAMID 'ABDALLAH AL-'ALI",
    "HAMID BIN ABDALLAH AHMED AL-ALI", "HAMID ABDALLAH AHMAD AL-ALI", "ABU USAMA",
    "RIF'AT SALIM", "ZAKI EZAT ZAKI AHMED", "ABU MUHAMMAD AL-JALAHMAH", "JABER AL-JALAMAH",
    "JABIR 'ABDALLAH JABIR AHMAD AL-JALAMAH", "JABIR ABDALLAH JABIR AHMAD JALAHMAH",
    "JABIR AL-JALHAMI", "JABER ABDALLAH JABER AHMAD AL-JALAHMAH",
    "ABD-AL-LATIF ABDALLAH AL-KAWARI", "ABD-AL-LATIF ABDALLAH AL-KAWWARI",
    "ABD-AL-LATIF ABDALLAH SALIH AL-KAWARI", "ABD-AL-LATIF ABDALLAH SALIH AL-KUWARI",
    "ABU ALI AL-KAWARI", "ABD AL-LATIF BIN ABDALLAH SALIH MUHAMMAD AL-KAWARI",
    "HAJI ABDUL BASIR AND ZAR JAMEEL HAWALA", "HAJI ABDUL BASIR EXCHANGE SHOP",
    "HAJI BASEER HAWALA", "HAJI BASHIR AND ZARJMIL HAWALA COMPANY",
    "HAJI BASIR AND ZARJAMIL CURRENCY EXCHANGE", "HAJI BASIR HAWALA",
    "HAJI ZAR JAMIL, HAJI ABDUL BASEER MONEY CHANGER", "HAJI BASIR AND ZARJMIL COMPANY HAWALA",
    "AL-NUSRA FRONT", "AL-NUSRAH FRONT", "ANSAR AL-MUJAHIDEEN NETWORK (SUB-UNIT NAME)",
    "CONQUEST OF THE LEVANT FRONT", "FATAH AL-SHAM FRONT", "FATEH AL-SHAM FRONT",
    "FRONT FOR THE CONQUEST OF SYRIA", "FRONT FOR THE CONQUEST OF SYRIA/THE LEVANT",
    "FRONT FOR THE LIBERATION OF THE LEVANT", "JABHAT AL-NUSRAH", "JABHAT FATAH AL-SHAM",
    "JABHAT FATEH AL-SHAM", "JABHAT FATH AL SHAM", "JABHAT FATH AL-SHAM", "JABHET AL-NUSRA",
    "LEVANTINE MUJAHIDEEN ON THE BATTLEFIELDS OF JIHAD (SUB-UNIT NAME)",
    "THE FRONT FOR THE LIBERATION OF AL SHAM", "AL-NUSRAH FRONT FOR THE PEOPLE OF THE LEVANT",
    "HARAKET SHAM AL-ISLAM", "SHAM AL-ISLAM", "SHAM AL-ISLAM MOVEMENT",
    "HARAKAT SHAM AL-ISLAM", "LES SENTINELLES", "THE SENTINELS", "AL MOURABITOUN",
    "LES ENTURBANNÉS", "THE VEILED", "AL MOULATHAMOUN", "ISLAMIC REGIMENT OF SPECIAL MEANING",
    "THE AL-JIHAD-FISI-SABILILAH SPECIAL ISLAMIC REGIMENT", "THE ISLAMIC SPECIAL PURPOSE REGIMENT",
    "SPECIAL PURPOSE ISLAMIC REGIMENT (SPIR)", "CEUX QUI SIGNENT AVEC LE SANG",
    "LES SIGNATAIRES PAR LE SANG", "THOSE WHO SIGN IN BLOOD", "AL MOUAKAOUNE BIDDAM",
    "AL-ITIHAAD AL-ISLAMIYA (AIAI)", "JUND AL KHALIFA", "JUND AL-KHILAFAH FI ARD AL-JAZAYER",
    "JUND AL-KHILAFAH FI ARD AL-JAZA’IR", "SOLDIERS OF THE CALIPHATE IN ALGERIA",
    "SOLDIERS OF THE CALIPHATE IN THE LAND OF ALGERIA", "JUND AL-KHILAFAH IN ALGERIA (JAK-A)",
    "AL-HARAMAYN FOUNDATION (TANZANIA)", "ARMY OF EMIGRANTS AND SUPPORTERS ORGANIZATION",
    "BATTALION OF EMIGRANTS AND ANSAR", "BATTALION OF EMIGRANTS AND SUPPORTERS",
    "JAYSH AL-MUHAJIRIN WAL-ANSAR (JAMWA)", "THE ARMY OF EMIGRANTS AND SUPPORTERS",
    "ANSAR AL CHARIA", "ANSAR AL CHARIA IN LIBYA", "ANSAR AL SHARIA", "ANSAR AL-CHARIA",
    "ANSAR AL-CHARIA BENGHAZI", "ANSAR AL-SHARIA", "ANSAR AL-SHARIA BENGHAZI",
    "KATIBAT ANSAR AL CHARIA", "ANSAR AL CHARIA BENGHAZI", "ANSAR AL CHARIA", "ANSAR AL SHARIA",
    "ANSAR AL-CHARIA DERNA", "ANSAR AL-SHARIA", "ANSAR AL-SHARIA DERNA", "ANSAR AL CHARIA DERNA",
    "ABDULLAH AZZAM BRIGADES",
    "ZIYAD AL-JARRAH BATTALIONS OF THE ABDALLAH AZZAM BRIGADES alais YUSUF AL-'UYAYRI BATTALIONS OF THE ABDALLAH AZZAM BRIGADES",
    "ABDALLAH AZZAM BRIGADES", "AL-QAYRAWAN MEDIA FOUNDATION",
    "ANSAR AL- SHARI'AH IN TUNISIA", "ANSAR AL-SHARIA", "ANSAR AL-SHARIA IN TUNISIA",
    "ANSAR AL-SHARI'AH N", "SUPPORTERS OF ISLAMIC LAW", "ANSAR AL-SHARI'A IN TUNISIA (AAS-T)",
    "AHMAD SHAH HAWALA", "HAJI AHMAD SHAH HAWALA", "MAULAWI AHMED SHAH HAWALA",
    "MULLAH AHMED SHAH HAWALA", "ROSHAN SARAFI", "ROSHAN SHIRKAT", "ROSHAN TRADING COMPANY",
    "RUSHAAN TRADING COMPANY", "ROSHAN MONEY EXCHANGE", "HAJI MUHAMMAD QASIM SARAFI",
    "MUSA KALIM HAWALA", "NEW CHAGAI TRADING", "RAHAT TRADING COMPANY", "RAHAT LTD.",
    "AL-HARAMAYN FOUNDATION (KENYA)", "HQN", "HAQQANI NETWORK",
    "STICHTING AL HARAMAIN HUMANITARIAN AID", "AL-HARAMAIN: THE NETHERLANDS BRANCH",
    "HAJI ALIM HAWALA", "HAJI HAKIM HAWALA", "HAJI KHAIR ULLAH MONEY SERVICE",
    "HAJI KHAIRULLAH AND ABDUL SATTAR AND COMPANY", "HAJI KHAIRULLAH MONEY EXCHANGE",
    "HAJI KHAIRULLAH-HAJI SATTAR SARAFI", "HAJI SALAM HAWALA",
    "SARAFI-YI HAJI KHAIRULLAH HAJI SATAR HAJI ESMATULLAH",
    "HAJI KHAIRULLAH HAJI SATTAR MONEY EXCHANGE", "AL-HARAMAYN FOUNDATION (UNION OF THE COMOROS)",
    "AL-HARAMAYN FOUNDATION (PAKISTAN)", "AL-HARAMAIN: ETHIOPIA BRANCH", "AL WAFA",
    "AL WAFA ORGANIZATION", "WAFA AL-IGATHA AL-ISLAMIA", "WAFA HUMANITARIAN ORGANIZATION",
    "AL-HARAMAYN: BANGLADESH BRANCH", "AL HARAMAIN AL MASJED AL AQSA",
    "AL HARAMAYN AL MASJID AL AQSA", "AL HARAMMEIN AL MASJED AL-AQSA CHARITY FOUNDATION",
    "AL-HARAMAYN AND AL MASJID AL AQSA CHARITABLE FOUNDATION",
    "AL-HARAMAIN & AL MASJED AL-AQSA CHARITY FOUNDATION", "AL-HARAMAIN: ALBANIA BRANCH",
    "AL-HARAMAIN: AFGHANISTAN BRANCH", "UTN", "UMMAH TAMEER E-NAU", "GICT",
    "GROUPE COMBATTANT TUNISIEN", "GROUPE ISLAMISTE COMBATTANT TUNISIEN",
    "TUNISIAN COMBATANT GROUP", "AKHTARABAD MEDICAL CAMP", "AL AKHTAR TRUST",
    "AL-AKHTAR MEDICAL CENTRE", "AZMAT PAKISTAN TRUST", "AZMAT-E-PAKISTAN TRUST",
    "PAKISTAN RELIEF FOUNDATION", "PAKISTANI RELIEF FOUNDATION", "AL-AKHTAR TRUST INTERNATIONAL",
    "AL QAIDA AU MAGHREB ISLAMIQUE (AQMI)", "AQIM",
    "LE GROUPE SALAFISTE POUR LA PRÉDICATION ET LE COMBAT (GSPC)",
    "SALAFIST GROUP FOR CALL AND COMBAT", "THE ORGANIZATION OF AL-QAIDA IN THE ISLAMIC MAGHREB",
    "AL HARAKAT AL ISLAMIYYA", "ABU SAYYAF GROUP", "AHYA UL TURAS",
    "JAMIAT AYAT-UR-RHAS AL ISLAMIAC", "JAMIAT IHYA UL TURATH AL ISLAMIA",
    "LAJNAT UL MASA EIDATUL AFGHANIA", "AFGHAN SUPPORT COMMITTEE (ASC)",
    "EAST INDONESIA MUJAHIDEEN", "MUJAHIDIN OF EASTERN INDONESIA",
    "MUJAHIDIN INDONESIAN TIMUR (MIT)", "PAKISTANI TALIBAN", "TEHREEK-E-TALIBAN",
    "TEHRIK-E-TALIBAN", "TEHRIK-I-TALIBAN PAKISTAN", "TEHRIK-E TALIBAN PAKISTAN (TTP)",
    "HASI", "INDONESIA HILAL AHMAR SOCIETY FOR SYRIA;", "YAYASAN HILAL AHMAR",
    "HILAL AHMAR SOCIETY INDONESIA", "JAT", "JEMAAH ANSHORUT TAUHID", "AL TAIBAH, INTL.",
    "TAIBAH INTERNATIONAL AID AGENCY", "TAIBAH INTERNATIONAL AID ASSOCIATION",
    "TAIBAH INTERNATIONAL AIDE ASSOCIATION", "TAIBAH INTERNATIONAL-BOSNIA OFFICES",
    "FIRQAT AL-TAKHRIB WA AL-ISTITLA AL-ASKARIYAH LI SHUHADA RIYADH AL-SALIHIN",
    "RIYADH-AS-SALIHEEN", "RIYADUS-SALIKHIN RECONNAISSANCE AND SABOTAGE BATTALION",
    "RIYADUS-SALIKHIN RECONNAISSANCE AND SABOTAGE BATTALION OF SHAHIDS (MARTYRS)",
    "THE SABOTAGE AND MILITARY SURVEILLANCE GROUP OF THE RIYADH AL-SALIHIN MARTYRS",
    "RIYADUS-SALIKHIN RECONNAISSANCE AND SABOTAGE BATTALION OF CHECHEN MARTYRS (RSRSBCM)",
    "JAMA’AH ISLAMIYAH", "JAMAAH ISLAMIYAH", "JEMA’AH ISLAMIYAH", "JEMAAH ISLAMIAH",
    "JEMAAH ISLAMIYA", "JEMAAH ISLAMIYAH", "AL-FURQAN FOUNDATION WELFARE TRUST",
    "AL-FURQAN WELFARE FOUNDATION", "JAMIA IHYA UL TURATH", "JAMIAT IHIA AL-TURATH AL-ISLAMIYA",
    "REVIVAL OF ISLAMIC SOCIETY HERITAGE ON THE AFRICAN CONTINENT", "RIHS",
    "REVIVAL OF ISLAMIC HERITAGE SOCIETY", "RAJAH SOLAIMAN ISLAMIC MOVEMENT",
    "RAJAH SOLAIMAN REVOLUTIONARY MOVEMENT", "RAJAH SOLAIMAN MOVEMENT", "LIFG",
    "LIBYAN ISLAMIC FIGHTING GROUP", "RABITA TRUST", "LASHKAR I JHANGVI (LJ)",
    "ABU AHMED GROUP", "AL-QAIDA IN EGYPT (AQE)", "JAMAL NETWORK", "MUHAMMAD JAMAL GROUP",
    "MUHAMMAD JAMAL NETWORK (MJN)",
    "MOUVEMENT POUR L’UNIFICATION ET LE JIHAD EN AFRIQUE DE L’OUEST (MUJAO)",
    "ARMY OF MOHAMMED", "JAISH-I-MOHAMMED", "GICM", "GROUPE ISLAMIQUE COMBATTANT MAROCAIN",
    "MOROCCAN ISLAMIC COMBATANT GROUP", "IMU", "ISLAMIC MOVEMENT OF UZBEKISTAN", "AL KIFAH",
    "MAK", "MAKHTAB AL-KHIDAMAT", "AL-DJIHAD AL-ISLAMI", "DZHAMAAT MODZHAKHEDOV",
    "ISLAMIC JIHAD GROUP OF UZBEKISTAN", "ISLAMIC JIHAD UNION", "JAMA’AT AL-JIHAD",
    "JAMAAT MOJAHEDIN", "JAMIAT AL-JIHAD AL-ISLAMI", "JAMIYAT", "KAZAKH JAMA’AT",
    "LIBYAN SOCIETY", "ZAMAAT MODZHAKHEDOV TSENTRALNOY ASII", "ISLAMIC JIHAD GROUP",
    "INTERNATIONAL BATTALION", "ISLAMIC PEACEKEEPING BATTALION",
    "ISLAMIC PEACEKEEPING INTERNATIONAL BRIGADE", "THE INTERNATIONAL BRIGADE",
    "THE ISLAMIC PEACEKEEPING ARMY", "THE ISLAMIC PEACEKEEPING BRIGADE",
    "ISLAMIC INTERNATIONAL BRIGADE (IIB)", "ISLAMIC ARMY OF ADEN", "ABDUL BASEER",
    "ABDUL BASIR", "Haji ‘ABD AL-BASIR", "HAJI ABDUL BASIR", "HAJI BASIR NOORZAI",
    "ABDUL BASIR NOORZAI", "AL-FARAN", "AL-HADID", "AL-HADITH", "HARAKAT UL-ANSAR",
    "HARAKAT UL-MUJAHIDEEN", "HUA", "HARAKAT UL-MUJAHIDIN / HUM", "SALMAN BULGARSKIY",
    "AYRAT NASIMOVICH VAKHITOV", "HARAKAT UL JIHAD-E-ISLAMI", "HARAKAT-UL-ANSAR",
    "HARKAT-AL-JIHAD-UL ISLAMI", "HARKATUL-JEHAD-AL-ISLAMI", "HARKAT-UL-JIHAD-AL ISLAMI", "HUA",
    "HUJI", "MOVEMENT OF ISLAMIC HOLY WAR", "HARAKAT-UL JIHAD ISLAMI",
    "GLOBAL RELIEF FOUNDATION (GRF)", "EMARAT KAVKAZ", "EGYPTIAN ISLAMIC MOVEMENT",
    "AL-JIHAD", "EGYPTIAN AL-JIHAD", "JIHAD GROUP", "NEW JIHAD", "EGYPTIAN ISLAMIC JIHAD",
    "DJAMAAT TURKISTAN", "ISLAMIC PARTY OF TURKESTAN", "THE EASTERN TURKISTAN ISLAMIC PARTY",
    "THE EASTERN TURKISTAN ISLAMIC PARTY OF ALLAH", "EASTERN TURKISTAN ISLAMIC MOVEMENT (ETIM)",
    "FARIS BALUCHISTAN", "MUHAMMAD ABD-AL-HALIM HUMAYDAH", "MUHAMMAD HAMEIDA SALEH",
    "MOHAMMED ABDEL-HALIM HEMAIDA SALEH", "ASBAT AL-ANSAR", "ABU OBEIDA",
    "AL-AS’AD BEN HANI", "LASED BEN HENI", "MOHAMED ABU ABDA", "MOHAMED AOUANI",
    "MOHAMED BEN BELGACEM AWANI", "MOHAMED LAKHAL", "AL JAMM’AH AL-ISLAMIAH AL-MUSALLAH",
    "GIA", "GROUPE ISLAMIQUE ARMÉ", "ARMED ISLAMIC GROUP", "ABU ISMAIL",
    "ABU ISMAIL AL-MAGHRIBI", "MORAD LAABOUDI", "ANSAR DINE", "ANSAR EDDINE", "ANSAR AL-SUNNA",
    "ANSAR AL-SUNNA ARMY", "DEVOTEES OF ISLAM", "FOLLOWERS OF ISLAM IN KURDISTAN",
    "JAISH ANSAR AL-SUNNA", "JUND AL-ISLAM", "KURDISH TALIBAN",
    "KURDISTAN SUPPORTERS OF ISLAM", "SOLDIERS OF GOD", "SOLDIERS OF ISLAM",
    "SUPPORTERS OF ISLAM IN KURDISTAN", "ANSAR AL-ISLAM", "GULMUROD KHALIMOV",
    "ABU MUATH AL-JUAITNI", "HUSAYN MUHAMAD HUSAYN AL-JUAYTHINI",
    "HUSAYN MUHAMMAD AL-JUAYTHINI", "HUSAYN MUHAMMAD HUSAYN AL-JUAYTHINI",
    "HUSAYN MUHAMMAD HUSAYN JUAYTHINI", "HUSSEIN MOHAMMED HUSSEIN ALJEITHNI", "HUSAYN JUAYTHINI",
    "AID ORGANIZATION OF THE ULEMA, PAKISTAN", "AL AMEEN TRUST", "AL AMIN TRUST",
    "AL AMIN WELFARE TRUST", "AL MADINA TRUST", "AL RASHEED TRUST", "AL-AMEEN TRUST",
    "AL-MADINA TRUST", "AL-RASHEED TRUST", "AL-RASHID TRUST", "AL RASHID TRUST",
    "NUSRET SULEJMAN IMAMOVIC", "NUSRET IMAMOVIC", "AB-BILAL", "ABU ASIM", "ABU BILAL",
    "ABU YASIR", "ABU-NASER", "HUSAN", "HUSAN ISAEVICH GAZIEV", "RAMZAN ODUEV", "SEVER",
    "TARKHAN ISAEVICH GAZIEV", "UMAR SULIMOV", "WAINAKH", "TARKHAN ISMAILOVICH GAZIEV",
    "AKHMAD SHISHANI", "DAVID MAYER", "ELMIR SENE", "ODNORUKIY", "AKHMED RAJAPOVICH CHATAEV",
    "ABUBAKAR", "AMIR KHAZMAT", "ASLAN AVGAZAROVICH BYUTUKAEV", "ABU JIHAD",
    "ISLAM SEIT-UMAROVICH ATABIEV", "SALIM BENGHALEM", "ABU AL BANAT", "ABU BANAT",
    "MAGHOMED MAGHOMEDZAKIROVICH ABDURAKHMANOV", "NAZIRULLAH AANAFI WALIULLAH",
    "NAZIRULLAH HANAFI WALIULLAH", "ASEEL MUTHANA", "AKHTER MOHMAD SON OF NOOR MOHMAD",
    "ABDUL JALIL AKHUND", "ABDUL JALIL HAQQANI", "HAJI GULAB GUL", "NAZAR JAN",
    "ABDUL JALIL HAQQANI WALI MOHAMMAD", "ABU MARYAM AL-TUNISI", "ABU RAHMAH", "MOUNIR HELEL",
    "MOUNIR HILEL", "MOUNIR BEN DHAOU BEN BRAHIM BEN HELAL", "WALIJAN", "QARI SAHAB",
    "QARI SAIFULLAH", "QARI SAIFULLAH AL TOKHI", "SAIFULLAH TOKHI", "QARI SAIFULLAH TOKHI",
    "AA (inisial)", "ABDELBASSED AZOUZ", "ABDUL BASET AZOUZ", "ABD AL-BASET AZZOUZ",
    "ABDUL RAQIB TAKHARI", "ABU-MUHAMMAD AL-SHIMALI", "TARAD ALJARBA", "TARAD MOHAMMAD ALJARBA",
    "SANANI", "HAMDULLAH SUNANI", "ABU MUHAMMAD", "ABU MUHAMMAD AL-KADARI", "MUHAMADMUHTAR",
    "RUSTAM MAGOMEDOVICH ASELDEROV", "ABDUL GHAFAR SHINWARI", "HAMIDULLAH AKHUND", "JANAT GUL",
    "HAMIDULLAH AKHUND SHER MOHAMMAD", "ABU AL ATHIR AMR AL ABSI", "ABU AL-ASIR", "ABU AL-ATHIR",
    "ABU AL-ATHIR AL-SHAMI", "ABU AMR AL SHAMI", "ABU ASIR", "ABU-UMAR AL-ABSI", "AMR AL ABSI",
    "AMRU AL-ABSI", "ABU SARA ZAHRANI", "ABU SARAH AL-SAUDI", "FAISAL AHMED ALI ALZAHRANI",
    "FAYSAL AHMAD BIN ALI AL-ZAHRANI", "PAHLAWAN SHAMSUDIN", "SHAMSUDDIN", "SAKINAH HUSSAIN",
    "UMM HUSSAIN AL-BRITANI", "SALLY-ANNE FRANCES JONES", "ABU HABIB AL-LIBI", "HASAN ABU HABIB",
    "HUSAYN AL-SALIHIN SALIH AL-SHA’IRI", "HASAN AL-SALAHAYN SALIH AL-SHA’ARI",
    "AKHTAR MOHAMMAD MANSOOR", "AKHTAR MOHAMMAD MANSOUR KHAN MUHAMMAD",
    "AKHTAR MUHAMMAD MANSOOR", "AKHTAR MOHAMMAD MANSOUR SHAH MOHAMMED",
    "ABDULLAH SHUWAR AL-AUJAYD", "ABU AYYUB", "ABU HAMMUD", "ABU LUQMAN", "ABU LUQMAN AL-SAHL",
    "ABU LUQMAN AL-SURI", "ALI AL-HAMOUD AL-SHAWAKH", "'ALI AL-HAMUD", "ALI AWAS",
    "'ALI DERWISH", "'ALI MUSA AL-SHAWAGH", "IBRAHIM AL-SHAWWAKH", "MUHAMMAD ‘ALI AL-SHAWAKH",
    "ALI MUSA AL-SHAWAKH", "SAID AHMED SHAHIDKHEL", "ABDUL WAHED SHAFIQ", "ABDUL WALI SEDDIQI",
    "SADRUDDIN", "SADUDIN SAYED", "SADUDDIN SAYYED", "ABU MARIAM", "AL-MASRI, ABU MOHAMED",
    "SALEH", "ABDULLAH AHMED ABDULLAH EL ALFI", "NOOR MOHAMMAD SAQIB", "ABDULHAI SALEK",
    "HABIBULLAH RESHAD", "FARAJ AHMAD NAJMUDDIN", "FATEH NAJM EDDINE FARRAJ", "MULLAH KREKAR",
    "NAJMUDDIN FARAJ AHMAD", "ABOU HAMZA", "ABU HAMZA", "ARFAUNI IMAD",
    "ARFAUNI IMAD BEN YOUSSET HAMZA", "BILAL", "BRUGERE", "DI KARLO ANTONIO", "DIMON", "HAMZA",
    "IMAM BEN YUSSUF ARFAJ", "JACQUES BROUGERE", "KOUMKAL", "KUMKAL", "MERLIN",
    "MERLIN OLIVER CHRISTIAN RENE", "TINET", "LIONEL DUMONT", "KARI RAHMAT", "QARI RAHMAT",
    "RAHMATULLAH SHAH NAWAZ", "ABOU MOSSAAB ABDELOUADOUD", "ABDELMALEK DROUKDEL",
    "GUD MULLAH MOHAMMAD HASSAN", "MOHAMMAD HASAN RAHMANI", "YAR MOHAMMAD RAHIMI", "ABOU ALA",
    "YAHIA ABOU AMMAR", "YAHIA DJOUADI", "FAISAL RABBI", "FAZAL RABI", "FAZL RABBI", "FAZL RABI",
    "ABOU ABDELJALIL", "ADEL", "BILAL", "FODHIL", "KAMEL DJERMANE", "ABDUSSALAM HANIFI",
    "HANAFI SAHEB", "ABDUL SALAM HANAFI ALI MARDAN QUL", "AMINULLAH AMIN", "MUHAMMAD YUSUF",
    "AMINULLAH AMIN QUDDUS", "DAVE", "ISMAEL", "ISMAEL DE VERA", "ISMAIL", "KHALID", "LEO",
    "MANEX", "TITO ART", "PIO ABOGNE DE VERA", "SAYED MOHAMMAD HASHAN", "TORAK AGHA",
    "TORIQ AGHA", "TORIQ AGHA SAYED", "TOREK AGHA", "HAJI KARIM", "NOOR UD DIN TURABI",
    "NOORUDDIN TURABI MUHAMMAD QASIM", "SHER MOHAMMAD ABBAS STANEKZAI PADSHAH KHAN",
    "ABU HANIFA", "SHAMIL MAGOMEDOVICH ALIEV", "SHAMIL MAGOMEDOVICH ISMAILOV",
    "IBRAHIM HAQQANI", "MOHAMMAD IBRAHIM OMARI", "ABDUL ABDILLAH", "ABUBAKAR ABDILLAH",
    "FELICIANO SEMBORIO DELOS REYES JR", "MUAWIN JABBAR", "MULLAH JABBAR",
    "ABDUL JABBAR OMARI", "ABDUL AZIZ", "AZIZ", "BACH", "FACKIH", "MUSLIM", "VOSTOCHNIY",
    "ZAURBEK SALIMOVICH GUCHAEV", "ABU ILONGGO", "ABU MUADZ", "ARNULFO ALVARADO",
    "BRANDON BERUSA", "DODONG", "HABIL AHMAD DELLOSA", "TROY", "UTHMAN",
    "REDENDO CAIN DELLOSA", "HAJI AHMAD SHAH", "HAJI MULLAH AHMAD SHAH",
    "MAULAWI AHMED SHAH", "MULLAH AHMED SHAH NOORZAI", "MULLAH MOHAMMED SHAH",
    "AHMED SHAH NOORZAI OBAIDULLAH", "ABD EL ILLAH", "ABDELLILLAH DIT ABDELLAH AHMED DIT SAID",
    "AHMED DEGHDEGH ABD EL ILLAH", "ABDUL MANAN NAYAZI", "ABDUL MANAN NIAZI", "BARYALAI",
    "BARYALY", "ABDUL MANAN NYAZI", "CABDULLAH MAYAMED CIISE", "MAXAMED CABDULLAAHI CIISE",
    "MAXAMMED CABDULLAAHI", "MAXAMED CABDULLAAH CIISE", "NORULLAH NOORI", "NURULLAH NURI",
    "ABD AL-RAHMAN MUHAMMAD AL-JUHANI", "ABD AL-RAHMAN MUHAMMAD THAFIR AL-JAHNI",
    "ABD AL-RAHMAN MUHAMMAD ZAFIR AL-DABISI AL-JAHANI",
    "ABD AL-RAHMAN MUHAMMAD ZAFIR AL-DUBAYSI AL-JAHANI",
    "ABD AL-RAHMAN MUHAMMAD ZAFIR AL-DUBAYSI AL-JAHNI",
    "ABD AL-RAHMAN MUHAMMAD ZAFIR AL-DUBAYSI AL-JUHANI",
    "ABD AL-RAHMAN MUHAMMAD ZAFIR AL-DUBAYSI AL-JUHNI",
    "ABDELRAHMAN MOUHAMAD ZAFIR AL DABISSI JUHAN", "ABDELRAHMAN MOUHAMAD ZAFIR AL DABISSI JUHANI",
    "ABDULRHMAN MOHAMMED D. ALJAHANI", "ABOU WAFA AL SAOUDI", "ABU AL-WAFA", "ABU AL-WAFA’",
    "ABU ANAS", "ABU WAFA AL-SAUDI", "ABDELRAHMAN MOUHAMAD ZAFIR AL DABIDI AL JAHANI",
    "ABU IBRAHEEM", "YASSIN CHOUKA", "ABDUL MOHSEN ABDULLAH IBRAHIM AL-SHARIKH",
    "SANAFI AL-NASR", "ABDUL MOHSEN ABDALLAH IBRAHIM AL-CHAREK", "ALLAH MUHAMMAD",
    "HAJI AMINULLAH", "HAJI MALEK NOORZAI", "HAJI MALUK", "HAJJI MALAK NOORZAI",
    "HAJJI MALIK NOORZAI", "MALIK NOORZAI", "ABU ADAM", "MONIR CHOUKA",
    "HAMID HAMAD HAMID AL-'ALI", "MOHAMMAD ALEEM NOORANI", "YASSINE CHEKKOURI",
    "HAMDULLAH NOMANI", "AJAJ AJAMI", "HAJAJ AL-AJAMI", "HAJJAJ BIN-FAHAD AL-AJMI",
    "HICAC FEHID HICAC MUHAMMED SEBIB AL-ACMI",
    "HIJAJ FAHID HIJAJ MUHAMMAD SAHIB AL-AJMI", "SHEIKH HAJAJ AL-AJAMI",
    "HAJJAJ BIN FHAD AL AJMI", "AAMIR ALI CHAUDARY", "AAMIR ALI CHOUDRY", "AMIR ALI CHAUDRY",
    "HUZAIFA", "AAMIR ALI CHAUDHRY", "ABOU KHATTAB", "ABOU SADEQ ALRAWI", "ABU BAKER AL-KHATAB",
    "ABU MOHAMED AL-ADNANI", "ABU MOHAMMED AL-ADNANI", "ABU SADEK AL-RAWI",
    "ABU-MOHAMMAD AL-ADNANI AL-SHAMI", "HAJJ IBRAHIM", "JABER TAHA FALAH", "TAH AL BINCHI",
    "TAHA AL-BANSHI", "TAHA SOBHI FALAHA", "YASER KHALAF NAZZAL ALRAWI",
    "YASSER KHALAF HUSSEIN NAZAL AL-RAWI", "ABOU MOHAMED AL ADNANI",
    "ABD EL WANIS ABD GAWWAD ABD EL LATIF BAHAA", "GAMEL MOHAMED", "MAHMOUD HAMID",
    "HAMADI BEN ABDUL AZIZ BEN ALI BOUYEHIA", "NAJIB ULLAH", "NAJIBULLAH MUHAMMAD JUMA",
    "F’RAJI DI SINGAPORE", "F’RAJI IL LIBICO", "FARAG alian FREDJ", "LAZRAG FARAJ",
    "LAZRG BEN ILA", "MERAI ZOGHBAI", "MERI ALBDELFATTAH ZGBYE", "MOHAMED LEBACHIR",
    "MUHAMMED EL BESIR", "ZOGHBAI MERAI ABDUL FATTAH", "MERAI ABDEFATTAH KHALIL ZOGHBI",
    "MOSLIM HAQQANI", "MOHAMMAD MOSLIM HAQQANI MUHAMMADI GUL", "ALLAH DAD TABEEB",
    "ALLAH DAD TAYYAB", "ALLAH DAD TAYEB WALI MUHAMMAD", "FAICAL BOUGHANMI",
    "FAYSAL AL-BUGHANIMI", "FAYCAL BOUGHANEMI", "ABDUL HAQ SON OF M. ANWAR KHAN",
    "ABDULHAI MOTMAEN", "AMIR KHAN MUTTAQI", "AMIR KHAN MOTAQI", "DAOUR NADRE", "DOUR NADRE",
    "IMAD BEN AL-MEKKI BEN AL-AKHDAR AL-ZARKAOUI", "NADRA", "ZARGA",
    "IMED BEN MEKKI ZARKAOUI", "MOHAMMAD YAQOUB", "BILAL BIN MARWAN",
    "MOHAMMAD SARWAR SIDDIQMAL", "MOHAMMAD SARWAR SIDDIQMAL MOHAMMAD MASOOD", "TALHA",
    "ADEM YILMAZ", "AL-HAMMAD", "ABDULLAH HAMAD MOHAMMAD KARIM", "ABDUL SALAM BHATTWI",
    "ABDUL SALAM BHUTVI", "ABDUL SALAM BUDVI", "HAFIZ ABDUL SALAM BHATTVI",
    "HAFIZ ABDUSALAM BUDVI", "HAFIZ ABDUSSALAAM BHUTVI", "MOLVI ABDURSALAM BHATTVI",
    "MULLAH ABDUL SALAAM BHATTVI", "HAFIZ ABDUL SALAM BHUTTAVI", "TAHA, ABDUL RAHMAN S.",
    "TAHER, ABDUL RAHMAN S.", "YASIN, ABDUL RAHMAN SAID", "YASIN, ABOUD", "ABDUL RAHMAN YASIN",
    "A. KABIR", "ABDUL KABIR MOHAMMAD JAN", "ADEL BEN AL-AZHAR BEN YOUSSEF BEN SOLTANE",
    "ZAKARIYA", "ADEL BEN AL-AZHAR BEN YOUSSEF HAMDI", "ABU ISMAIL", "ABU OMAR ABU UMAR",
    "ABU QATADA AL-FILISTINI", "ABU UMAR UMAR", "ABU UMR TAKFIRI", "AL-SAMMAN UTHMAN",
    "OMAR MOHAMMED OTHMAN", "UMAR UTHMAN", "OMAR MAHMOUD UTHMAN", "ABOU ABBES KHALED",
    "BELAOUA", "BELAOUAR KHALED ABOU EL ABASS", "BELAOUER KHALED ABOU EL ABASS", "BELAOUR",
    "BELMOKHTAR KHALED ABOU EL ABES", "KHALED ABOU EL ABASS", "KHALED ABOU EL ABBES",
    "KHALED ABOU EL ABES", "KHALED ABULABBAS NA OOR", "MUKHTAR BELMUKHTAR",
    "MOKHTAR BELMOKHTAR", "ABDELALI ABOU DHER", "EL HARRACHI", "MOHAMED BELKALEM",
    "DOKKA UMAROV", "LOM-ALI BUTAYEV", "DOKU KHAMATOVICH UMAROV", "MAHMOOD, SULTAN BASHIRUDDIN",
    "MEHMOOD, Dr. BASHIR UDDIN", "MEKMUD, SULTAN BAISHIRUDDIN",
    "MAHMOOD SULTAN BASHIR-UD-DIN", "TUFAIL, S.M.", "TUFFAIL, SHEIK MOHAMMED",
    "MOHAMMED TUFAIL", "ALHAJ QARI AYUB BASHAR", "QARI MUHAMMAD AYUB", "AYYUB BASHIR",
    "ABDUL KHALIL", "ABDULKAHLIL", "ABU KHALIL", "ANIS", "CALIB TRINIDAD", "KALIB TRINIDAD",
    "ANGELO RAMIREZ TRINIDAD", "\"ABD AL-MUHSIN\"", "'ABD AL-MUHSI", "'ABD AL-RAHMAN",
    "ABDEL ILAH SABRI", "ABDUL RAHMAN", "ABU ANAS", "AL-LIBI", "IBRAHIM ABUBAKER TANTOUCHE",
    "IBRAHIM ABUBAKER TANTOUSH", "IBRAHIM ALI MUHAMMAD ABU BAKR",
    "IBRAHIM ALI ABU BAKR TANTOUSH", "ABDERRAHMANE AL MAGHRIBI", "MOHAMED ABBATTAY",
    "ZOUHEIR AL MAGHRIBI", "SAID BAHAJI", "ABDUL KAREEM AYERAS", "ABDUL KARIM AYERAS",
    "ABDUL MUJIB", "ISAAC JAY GALANG PEREZ", "JIMBOY", "RICKY AYERAS", "RICARDO PEREZ AYERAS",
    "ABDUL MANAN MOHAMMAD ISHAK", "ABU ZUFAR", "JOE", "YAZID SUFAAT",
    "MOHAMMAD SHAFIQ MOHAMMADI", "MOHAMMAD WALI", "MOHAMMAD WALI MOHAMMAD EWAZ",
    "SALAH SHIHATA THIRWAT", "SHAHATA THIRWAT", "TARWAT SALAH ABDALLAH",
    "THARWAT SALAH SHIHATA ALI", "THARWAT SALAH SHIHATA", "AHMED DAHIR AWEYS",
    "ALI, SHEIKH HASSAN DAHIR AWEYS", "AWES, SHAYKH HASSAN DAHIR", "AWEYS HASSAN DAHIR",
    "HASSAN DAHIR AWES", "HASSAN TAHIR OAIS", "HASSAN TAHIR UWAYS", "HASSEN DAHIR AWEYES",
    "MOHAMMED HASSAN IBRAHIM", "SHEIKH AWEYS", "SHEIKH HASSAN", "SHEIKH HASSAN DAHIR AWEYS",
    "HASSAN DAHIR AWEYS", "FAZEL MOHAMMAD MAZLOOM", "MOLAH FAZL", "FAZL MOHAMMAD MAZLOOM",
    "AKHTAR MOHAMMAD MAZ-HARI", "ABDUL QUDDUS MAZHARI", "ABU-AHMAD AL-AMRIKI (THE AMERICAN)",
    "ABU-AHMAD AL-HAWEN", "ABU-AHMAD AL-SHAHID", "RAED M. HIJAZI",
    "RASHID AL-MAGHRIBI (THE MOROCCAN)", "RI'AD MUHAMMAD HASAN MUHAMMAD HIJAZI",
    "RAED MUHAMMAD HASAN MUHAMMAD HIJAZI", "MATIULLAH", "HAJI M. ASHRAF",
    "MUHAMMAD ASHRAF MANSHAH", "MUHAMMAD ASHRAF MUNSHA", "HAJI MUHAMMAD ASHRAF", "AKHUND",
    "ALLAHDAD", "SHAHIDWROR", "ALLAH DAD MATIN", "ABU MOHAMMED ABUBAKAR BIN MOHAMMED",
    "ABU MUHAMMED ABUBAKAR BI MOHAMMED", "ABUBAKAR SHEKAU", "IMAM DARUL TAUHID",
    "IMAM DARUL TAWHEED", "SHAYKU", "SHEHU", "SHEKAU", "ABUBAKAR MOHAMMED SHEKAU",
    "MAWLAWI NANAI", "MOHAMMADULLAH MATI", "ABDUL LATIF MANSOOR", "WALI MOHAMMAD",
    "ABDUL LATIF MANSUR", "\"ZIAURRAHMAN MADANI\"", "DIYA’ AL-RAHMAN MADANI", "MADANI SAHEB",
    "ZAIA U RAHMAN MADANI", "ZIA-UR-RAHMAN MADANI", "ABDALARAK", "ABDERREZAK LE PARA",
    "ABDERREZAK ZAIMECHE", "ABDUL RASAK AMMANE ABU HAIDRA", "ABOU HAIDARA", "EL OURASSI",
    "EL PARA", "SAIFI AMMARI", "ABU ABDULLAH SANTOS", "ABU HAMSA", "AHMAD ISLAM SANTOS",
    "AHMED ISLAM", "AKI", "AKMAD SANTOS", "AQI", "FAISAL SANTOS", "HILARION DEL ROSARIO SANTOS III",
    "HILARION SANTOS III", "LAKAY", "HILARION DEL ROSARIO SANTOS",
    "ABDUL RAZAQ AKHUND LALA AKHUND", "ABDUL QADER ABDUL AZIZ ABDUL MOEZ AL DOCTOR",
    "ABU FATMA", "ABU MOHAMMED", "AHMAD FUAD SALIM", "AHMED FUAD SALIM", "AL ZAWAHIRI AYMAN",
    "AL ZAWAHRY AIMAN MOHAMED RABI", "AL ZAWAHRY AIMAN MOHAMED RABI ABDEL MUAZ",
    "AL ZAWAHRY AIMAN MOHAMED RABIE", "AL ZAWAHRY AIMAN MOHAMED ROBI", "AYMAN AL ZAWAHARI",
    "AYMAN AL-ZAWAHARI", "DHAWAHRI AYMAN", "EDDAOUAHIRI AYMAN", "NUR AL DEEN ABU MOHAMMED",
    "AIMAN MUHAMMED RABI AL-ZAWAHIRI", "ABDUL SALAM", "MUHAMMAD QASIM",
    "MOHAMMED QASIM MIR WALI KHUDAI RAHIM", "HAJI KHAIR MOHAMMAD", "HAJI KARIMULLAH",
    "HAJI KHAIR ULLAH", "HAJI KHAIRULLAH", "HAJI KHEIRULLAH", "KHAIRULLAH BARAKZAI KHUDAI NAZAR",
    "ABU HAFS THE MAURITANIAN", "KHALID AL-SHANQITI", "MAFOUZ WALAD AL-WALID",
    "MAHFOUZ OULD AL-WALID", "DASS", "NASIM AL-SAHRAWI", "NESSIM BEN ROMDHANE SAHRAOUI",
    "COMMANDER PUTOL", "RADULAN SAHIRUN", "RADULAN SAJIRUN", "RADULLAN SAHIRON",
    "RADULAN SAHIRON", "HAFEZ MOHAMMAD SAEED", "HAFIZ JI", "HAFIZ MOHAMMAD SAHIB",
    "HAFIZ MOHAMMAD SAYEED", "HAFIZ MOHAMMAD SAYID", "HAFIZ MUHAMMAD", "HAFIZ SAEED",
    "MOHAMMAD SAYED", "MUHAMMAD SAEED", "TATA MOHAMMAD SYEED", "HAFIZ MUHAMMAD SAEED",
    "ABU ASIM AL-MAKKI", "AHMED", "AL-HAMATI, MUHAMMAD", "MOHAMED MOHAMED ABDULLAH AL-AHDAL",
    "MUHAMMAD MUHAMMAD ABDULLAH AL-AHDAL", "MOHAMMAD HAMDI MOHAMMAD SADIQ AL-AHDAL",
    "ABU HAMZAH", "ABU-AHMAD HADUD", "HANI", "SAMIR AHMED AL-KHAYAT", "ANAS HASAN KHATTAB",
    "GUL MOHAMMAD", "GUL MOHAMMAD KAMRAN", "HAJI GHUL MOHAMMAD", "HAJI GUL MOHAMMED NAIM BARICH",
    "MAWLAWI GUL MOHAMMAD", "MOHAMMAD NAIM", "MULLAH NAEEM BARAICH", "MULLAH NAEEM BARECH",
    "MULLAH NAEEM BARIC", "MULLAH NAIM BARECH", "MULLAH NAIM BARECH AKHUND", "MULLAH NAIM BAREH",
    "MULLAH NAIM BARICH", "MULLAH NAIMULLAH", "NAIM BERICH", "SPEN ZRAE",
    "MOHAMMAD NAIM BARICH KHUDAIDAD", "AL-HAQ, AMIN", "AMIN, MUHAMMAD", "Dr. AMIN",
    "UL HAQ, Dr. AMIN", "AMIN MUHAMMAD UL HAQ SAAM KHAN", "ABU MOHAMMAD AMIN BISHAWRI",
    "ABU MOHAMMAD AMINULLAH PESHAWARI", "ABU MOHAMMAD SHAYKH AMINULLAH AL-BISHAURI",
    "SHAYKH ABU MOHAMMED AMEEN AL-PESHAWARI", "SHAYKH AMINULLAH", "SHAYKH AMINULLAH AL-PESHAWARI",
    "SHEIK AMINULLAH", "FAZEEL-A-TUL SHAYKH ABU MOHAMMED AMEEN AL-PESHAWARI", "LAZHAR",
    "SALMANE", "AL-AZHAR BEN KHALIFA BEN AHMED ROUINE", "'ABD AL-RAHMAN KHALAF AL-ANIZI",
    "'ABD AL-RAHMAN KHALAF AL-'ANZI", "ABU SHAIMA' KUWAITI", "ABU USAMA", "ABU USAMAH AL-KUWAITI",
    "ABU USAMAH AL-RAHMAN", "YUSUF", "ABD AL-RAHMAN KHALAF 'UBAYD JUDAY' AL-'ANIZI",
    "ABDELHALIM REMADNA", "JALLOUL", "ABDELHALIM HAFED ABDELFATTAH REMADNA", "MANSOUR THAER",
    "ISAM ALI MOHAMED ALOUCHE", "EZATULLAH HAQQANI", "EZATULLAH HAQQANI KHAN SAYYID",
    "FAZEL RAHIM", "FAZIL RAHIM", "FAZIL RAHMAN", "FAZAL RAHIM", "ABU FAYSAL", "ABU GHAZZY",
    "GHAZY FEZZAA HISHAN", "MUSHARI ABD AZIZ SALEH SHLASH", "GHAZY FEZZA HISHAN AL-MAZIDIH",
    "KHIRULLAH SAID WALI KHAIRKHWA", "MULLAH KHAIRULLAH KHAIRKHWAH", "KHAIRULLAH KHAIRKHWAH",
    "ARIF UMER", "BABA JI", "MEMON BABA", "MOHAMMAD ARIF QASMANI", "MUHAMMAD ‘ARIF QASMANI",
    "MUHAMMAD ARIF QASMANI", "QASMANI BABA", "ARIF QASMANI", "MULLAH ABDUL RAUF ALIZA",
    "ABDUL RAUF KHADEM", "ABOU AAYADH", "ABOU IYADH", "ABOU IYADH EL-TOUNSI",
    "ABU AYYAD AL-TUNISI", "ABU IYYADH AL-TUNISI", "SAIFALLAH BEN HASSINE",
    "SAYF ALLAH ‘UMAR BIN HASSAYN", "SAYF ALLAH BIN HUSSAYN", "SEIF ALLAH BEN HOCINE",
    "SEIFALLAH BEN AMOR BEN HASSINE", "SEIFALLAH BEN OMAR BEN MOHAMED BEN HASSINE", "ABU AKRAM",
    "ABU JARRAH", "AKRAM TURKI AL-HISHAN", "AKRAM TURKI HISHAN AL-MAZIDIH", "KAKAZADA",
    "MULLAH NASIR", "REHMATULLAH", "RAHMATULLAH KAKAZADA", "AKMAD", "JOHNNY PAREJA",
    "KHALIL PAREJA", "MIGHTY", "MOHAMMAD", "RASH", "DINNO AMOR ROSALEJOS PAREJA",
    "ABDARRAHMANE OULD MOHAMED EL HOUCEIN OULD MOHAMED SALEM", "ABDEL KHADER",
    "ABOU SOULEIMANE", "CHINGHEITY", "EL HADJ OULD ABDEL GHADER", "MOHAMED SALEM",
    "SALIH THE MAURITANIAN", "SHAYKH YUNIS THE MAURITANIAN", "SHEIKH YUNIS AL-MAURITANI",
    "YOUNIS AL MAURITANI", "YOUSSEF OULD ABDEL JELIL", "YUNIS AL-MAURITANI",
    "ABD AL-RAHMAN OULD MUHAMMAD AL-HUSAYN OULD MUHAMMAD SALIM", "ABID KHAN", "SAIDULLAH JAN",
    "ABU JABAL", "ABU-JABAL", "BARAHIM SULIMAN H. AL HBLIAN", "IBRAHIM SULEIMAN HAMAD AL-HABLAIN",
    "HAJI SAHIB", "QUDRATULLAH JAMAL", "HAMZAH AL-DARNAWI",
    "ABD AL-HAMID MUHAMMAD ABD-AL-HAMID AL-MASLI", "ABD-AL-HAMID MUSALLI",
    "ABDULLAH DARNAWI", "ABU-HAMZAH AL-DARNAWI", "HAMID MASLI", "HAMZA AL-DARNAVI",
    "HAMZA AL-DARNAWI", "HAMZA DARNAVI", "HAMZA DARNAWI", "HAMZAH DARNAWI", "HAMZAH DIRNAWI",
    "ABD-AL-HAMID AL-MASLI", "ABU ABDURRAHMAN THE MOROCCAN", "ABU ABDURRAHMAN THE NORWEGIAN",
    "MUSLIM ABU ABDURRAHMAN", "ANDERS CAMEROON OSTENSVIG DALE", "HAJI HIDAYATULLAH",
    "HAYADATULLAH", "HIDAYATULLAH", "MULLAH GUL AGHA", "MULLAH GUL AGHA AKHUND",
    "GUL AGHA ISHAKZAI", "JAN MOHAMMAD MADANI IKRAM", "ABOU ISMAIL AL DJOUNDOUBI",
    "ABOU ISMAIL EL JENDOUBI", "ABU ISMAIL", "TAREK BEN HABIB BEN AL-TOUMI AL-MAAROUFI",
    "HOTAK SAHIB", "ABDUL RAHMAN AHMAD HOTTAK", "ABOU QUMQUM", "HAMAD EL KHAIRY",
    "HAMADA OULD MOHAMED LEMINE OULD MOHAMED EL KHAIRY", "OULD KHEIROU",
    "HAMADA OULD MOHAMED EL KHAIRY", "ABU ABDALLA AL-HARBI", "ABU MUSLEM AL-MAKY",
    "ABU SULIMAN AL-HARBI", "AZAM A.R. ALSBHUA", "AZAM ABDALLAH RAZEEQ AL MOULED ALSBHUA",
    "AZZAM AL-SUBHI", "MANSUR AL-HARBI", "AZZAM ABDULLAH ZUREIK AL-MAULID AL-SUBHI",
    "NAJIBULLAH HAQANI", "NAJIBULLAH HAQQANI HIDAYATULLAH",
    "ABDERRAHMANE OULD EL AMAR OULD SIDAHMED LOUKBEITI", "AHMAD OULD AMAR", "AHMED EL TILEMSI",
    "ABDERRAHMANE OULD EL AMAR", "AL-HABIB BEN AHMAD BEN AL-TAYIB AL-LUBIRI",
    "HABIB BEN AHMED AL-LOUBIRI", "ABU TURAB", "HIDAYATULLAH", "ABOU MOUHADJIR",
    "DJAAFAR ABOU MOHAMED", "MOHAMED OULD AHMED OULD ALI", "TAYEB NAIL", "QARI SAHAB",
    "YAYA", "YAHYA HAQQANI", "MUHAMMAD JAMAL ABD-AL RAHIM AL-KASHIF", "ABU AHMAD", "ABU JAMAL",
    "MOHAMMAD JAMAL ABDO AHMED", "MUHAMMAD GAMAL ABU AHMED", "MUHAMMAD JAMAL",
    "MUHAMMAD JAMAL ABD-AL RAHIM AHMAD AL-KASHIF", "MUHAMMAD JAMAL ABDO AL KASHEF",
    "MUHAMMAD JAMAL ABDO AL-KASHIF", "MUHAMMAD JAMAL ABDU", "MUHAMMAD JAMAL ABDUH",
    "MUHAMMAD JAMAL ABU AHMAD", "MUHAMMAD JAMAL AHMAD ABDU", "RIYADH",
    "MUHAMMAD JAMAL ABD-AL RAHIM AHMAD AL-KASHIF", "ABU MARYAM AL-AZADI",
    "ABU MARYAM AL-SAUDI", "ABU MARYAM AL-ZAHRANI", "AHMAD ABDULLAH SALIH AL-ZAHRANI",
    "AHMED ABDULLAH S AL-ZAHRANI", "AHMED ABDULLAH SALEH AL-ZAHRANI AL-KHOZMRI",
    "AHMED BIN ABDULLAH SALEH BIN AL-ZAHRANI", "AHMED ABDULLAH SALEH AL-KHAZMARI AL-ZAHRANI",
    "ABOU BAKR AL DJAZAIRI", "ABOU YASSER AL-JAZIRI", "ABOU YASSER EL DJAZAIRI",
    "ABU BAKR AL-JAZIRI", "BOUBAKEUR BOULGHIT", "YASIR AL-JAZARI", "BOUBEKEUR BOULGHITI",
    "ABD AL-AZIZ AL-MASRI", "ALI SALIM", "ALI SAYYID MUHAMED MUSTAFA BAKRI", "KHALIFA",
    "SARAJ HAQANI", "SERAJUDDIN HAQANI", "SIRAJ HAQQANI", "SIRAJUDDIN JALLALOUDINE HAQQANI",
    "HAKIM ALI AL-HASHEM MURAD", "MURAD, ABDUL HAKIM AL HASHIM",
    "MURAD, ABDUL HAKIM ALI HASHIM", "MURAD, ABDUL HAKIM HASIM", "SAEED AHMED", "SAEED AKMAN",
    "ABDUL HAKIM MURAD", "ABU ASHRAF", "ABU MOHAMED AL-JAWLANI", "ABU MOHAMMED AL-GOLANI",
    "ABU MOHAMMED AL-JULANI", "ABU MUHAMMAD AL-GOLANI", "ABU MUHAMMAD AL-JAWLAN",
    "ABU MUHAMMAD ALJAWLANI", "AMJAD MUZAFFAR HUSSEIN ALI AL-NAIMI", "MUHAMMAD AL-JAWLANI",
    "SHAYKH AL-FATIH", "ABU MOHAMMED AL-JAWLANI", "MOHAMMAD YAHYA AZIZ",
    "MOHAMMED YAHYA MUJAHID", "MATIUR RAHMAN", "ABDUL SAMAD", "ABDUL SAMAD SIAL", "HUSSAIN",
    "MATI UR REHMAN", "MATIUR REHMAN", "MATI-UR REHMAN", "MATTI AL-REHMAN", "QARI MUSHTAQ",
    "SAMAD SIAL", "TARIQ", "USTAD TALHA", "MATI UR-REHMAN ALI MUHAMMAD",
    "FAIZULLAH NOORZAI AKHTAR MOHAMMED MIRA KHAN", "HAJI FAIZULLAH KHAN", "HAJI FAIZULLAH NOOR",
    "HAJI FAIZULLAH NOORI", "HAJI FAIZUULAH KHAN NOREZAI", "HAJI FIAZULLAH",
    "HAJI MULLAH FAIZULLAH", "HAJI PAZULLAH NOORZAI", "HAJJI FAIZULLAH KHAN NOORZAI",
    "FAIZULLAH KHAN NOORZAI", "QARI ZAKIR", "ABDUL RAUF ZAKIR", "JAN AGHA AHMADZAI",
    "ZAHID AHMADZAI", "MOHAMMAD ZAHID", "ABDUL REHMAN ZAHID", "ABDUL RAHMAN ZAHED",
    "MOHAMMAD-OMAR JADRAN", "MUHAMMAD OMAR ZADRAN", "OBAID ULLAH AKHUND", "OBAIDULLAH AKHUND",
    "UBAIDULLAH AKHUND YAR MOHAMMAD AKHUND", "HAMBALI", "RIDUAN ISMUDIN", "ENCEP NURJAMAN",
    "ABO GHAITH", "SULAIMAN JASSEM SULAIMAN ALI ABO GHAITH", "ABU ABDULRAHMAN",
    "MOBARAK MESHKHAS SANAD AL-BTHALY", "MUBARAK AL-BATHALI", "MUBARAK MISHKAS SANAD AL-BAZALI",
    "MUBARAK MISHKHAS SANAD AL-BATHALI", "MUBARAK MISHKHIS SANAD AL-BADHALI",
    "MUBARAK MISHKHIS SANAD AL-BATHALI", "MUBARAK MUSHAKHAS SANAD MUBARAK AL-BATHALI",
    "MOHAMMAD JAWAD WAZIRI", "HAMRAOUI KAMEL", "HAMROUI KAMEL BEN MOULDI", "KAMEL", "KIMO",
    "KAMAL BEN MAOELDI BEN HASSAN AL-HAMRAOUI", "MOHAMMAD ESSA AKHUND",
    "MOHAMMAD ABBAS AKHUND", "MOHAMMAD HASSAN AKHUND", "AL UMAIRAH AL-GHAMDI",
    "OTHMAN AHMED OTHMAN AL OMAIRAH", "OTHMAN AHMED OTHMAN AL-OMIRAH", "OTHMAN AL-GHAMDI",
    "OTHMAN BIN AHMED BIN OTHMAN", "OTHMAN BIN AHMED BIN OTHMAN ALGHAMDI",
    "UTHMAN AHMAD UTHMAN AL-GHAMDI", "UTHMAN AL-GHAMDI", "UTHMAN AL-GHAMIDI",
    "OTHMAN AHMED OTHMAN AL-GHAMDI", "MOHAMMED AMAN", "MULLAH MAD AMAN USTAD NOORZAI",
    "MULLAH MOHAMMAD AMAN USTAD NOORZAI", "MULLAH MOHAMMED OMAN", "SANAULLAH",
    "MOHAMMAD AMAN AKHUND", "ALI BARKANI", "BALKASAM KALAD", "BEKASAM KALAD", "BELKASAM KALAD",
    "DAMEL MOSTAFA", "DJAMAL MOSTAFA", "DJAMEL MOSTAFA", "DJAMEL MUSTAFA", "FJAMEL MOUSTFA",
    "KALAD BELKASAM", "MOSTAFA DJAMEL", "MOSTEFA DJAMEL", "MUSTAFA", "MUSTAFA DJAMEL",
    "DJAMEL MOUSTFA", "ATTIQULLAH AKHUND", "HAJI MULLAH SAHIB", "ZAKIR", "ABDUL BARI AKHUND",
    "MOHAMED AMIN MOSTAFA", "KHALED A.", "KHALED AL-FAUWAZ",
    "KHALID ABD AL-RAHMAN HAMD AL-FAWAZ", "SALEH MOHAMMAD KAKAR AKHTAR MUHAMMAD",
    "HADJI ONOS", "MUKHLIS YUNOS", "MUKLIS YUNOS", "SAIFULLA MOKLIS YUNOS",
    "SAIFULLAH MUKHLIS YUNOS", "YUNOS UMPARA MOKLIS", "AHMED JAN KUCHI", "AHMED JAN ZADRAN",
    "AHMED JAN WAZIR AKHTAR MOHAMMAD", "ABOU ALI", "DRISSI NOUREDDINE", "FAYCAL",
    "NOUREDDINE BEN ALI BEN BELKASSEM AL-DRISSI", "MOHAMMAD AHMADI", "JAMAL LOUNICI",
    "DJAMEL LOUNICI", "ABDULLAH RAGAB", "ABDALLAH AL- MASRI", "ABU AL-WARD", "ABU NAIM",
    "SALEM NOR ELDIN AMOHAMED AL-DABSKI", "ANWAR AL-AULAQI", "ANWAR AL-AWLAKI",
    "ANWAR AL-AWLAQI", "ANWAR NASSER ABDULLA AULAQI", "ANWAR NASSER ABDULLAH AULAQI",
    "ANWAR NASSER AULAQI", "ANWAR NASSER ABDULLA AL-AULAQI", "FATHI HANNACHI",
    "MOHAMED BEN BELKACEM AOUADI", "MOHAMED BEN BELGACEM BEN ABDALLAH AL-AOUADI",
    "ABDULLAH MUDDARIS", "ALI OMAR", "ESO", "JUNJUN", "MIKE DE LAVILLA", "MILE D LAVILLA",
    "OMAR LABELLA", "OMAR LAVILLA", "RAMO LAVILLA", "REUBEN LAVILLA", "REYMUND LAVILLA",
    "SHEIK OMAR", "SO", "RUBEN PESTANO lS LAVILLA JR", "ABU THALE", "AMDOUNI MEHREZ BEN TAH",
    "FABIO FUSCO", "MEHEREZ BEN AHDOUD BEN AMDOUNI", "MEHEREZ HAMDOUNI", "MOHAMED HASSAN",
    "MEHREZ BEN MAHMOUD BEN SASSI AL-AMDOUNI", "ABU WAHEED IRSHAD AHMAD ARSHAD", "CHACHAJEE",
    "KAKI UR-REHMAN", "ZAKI UR-REHMAN LAKVI", "ZAKIR REHMAN", "ZAKIR REHMAN LAKVI",
    "ZAKI-UR-REHMAN LAKHVI", "HASSAN", "HOCINE", "MOHAMED ENNOUINI", "MOHAMED LAHBOUS",
    "ABD UR-REHMAN", "ABDUL REHMAN", "ABDUL REHMAN AL-SINDHI", "ABDUL REHMAN SINDHI",
    "ABDULLAH SINDHI", "ABDUR RAHMAN", "ABDUR RAHMAN AL-SINDHI", "ABDUR REHMAN MUHAMMAD YAMIN",
    "ABDUR REHMAN SINDHI", "ABDURAHMAN SINDHI", "ABDUR REHMAN", "RACHID",
    "ABDELKADER LAAGOUB", "ABU GHARIB AL-MADANI", "ABU SHAYMA", "ABU-SHAIMA", "AHMAD SHAHJI",
    "HASAN GUL", "HASSAN GHUL", "HASSAN GUL", "KHALID MAHMUD", "MUSTAFA MUHAMMAD",
    "MUSTAFA HAJJI MUHAMMAD KHAN", "YAHIA ABOU EL HAMMAM", "YAHIA ABOU EL HOUMMAM",
    "DJAMEL AKKACHA", "ABDUL HAMID ABDUL AZIZ", "ANIS IBRAHIM", "AZIZ DILIP", "BADA BHAI",
    "BADA SETH", "DAUD HASAN SHAIKH IBRAHIM KASKAR", "DAUD IBRAHIM MEMON KASKAR",
    "DAWOOD BHAI", "DAWOOD EBRAHIM", "DAWOOD HASAN IBRAHIM KASKAR", "DAWOOD IBRAHIM MEMON",
    "DAWOOD SABRI", "DOWOOD HASSAN SHAIKH IBRAHIM", "HAJI SAHAB", "HIZRAT",
    "IBRAHIM SHAIKH MOHD ANIS", "IQBAL BHAI", "KASKAR DAWOOD HASAN", "MUCCHAD",
    "SHAIKH ISMAIL ABDUL", "SHAIKH MOHD ISMAIL ABDUL REHMAN", "SHEIKH DAWOOD HASSAN",
    "SHEIKH FAROOQI", "DAWOOD IBRAHIM KASKAR", "SAYED GHIAS", "SAYED GHIASUDDIN SAYED GHOUSUDDIN",
    "SAYYED GHAYASUDIN", "SAYYED GHIASSOUDDINE AGHA", "AMR AL-FATIH FATHI",
    "HAMDI AHMAD FARAG", "TAREK ANWAR EL SAYED AHMAD", "TARIQ ANWAR EL SAYED AHMED",
    "AGHA SAHEB", "SAYED MOHAMMAD AZIM AGHA", "SAYED MOHAMMAD AZIM AGHA", "ABDULLAH JAN AGHA",
    "JANAN AGHA", "SALMANE", "MEHDI BEN MOHAMED BEN MOHAMED KAMMOUN", "NOOR AHMAD",
    "NOOR AHMED", "SIA AGHA SAYEED", "ZIA AGHA", "AHMAD ZIA AGHA", "ABDUL RAHMAN AGHA",
    "JULKIPLI SALIM", "KIPLI SALI", "SALIM Y SALAMUDDIN JULKIPLI", "MAULAVI ADAM",
    "MAULAVI ADAM KHAN", "ADAM KHAN ACHEKZAI", "KAUA OMAR ACHMED", "KAWA HAMAWANDI",
    "KAWA OMAR AHMED", "FARHAD KANABI AHMAD", "ABDUL SAMAD", "ABDUL SAMAD ACHEKZAI",
    "SHAMS UR-RAHMAN SHER ALAM", "SHAMS-U-RAHMAN", "SHAMSURRAHMAN",
    "SHAMSURRAHMAN ABDURAHMAN", "SHAMS UR-RAHMAN ABDUL ZAHIR", "SIDI MOHAMED ARHALI",
    "IYAD AG GHALI", "ASMATULLAH ASEM", "ESMATULLAH ASEM", "SAYED ESMATULLAH ASEM",
    "SAYED ESMATULLAH ASEM ABDUL QUDDUS", "AHMAD TAHA KHALID ABDUL QADIR", "ABDUL HAI HAZEM",
    "ABDUL HAI HAZEM ABDUL QADER", "ABDULASATTAR", "HAJI ABDUL SATAR", "HAJI ABDUL SATTAR BARAKZAI",
    "HAJI SATAR BARAKZAI", "ABDUL SATAR ABDUL MANAN", "ADAM", "IBN EL QAIM", "MOHAMED OSMAN",
    "ALY SOLIMAN MASSOUD ABDUL SAYED", "AMIR ABDULLAH SAHIB", "AMIR ABDULLAH",
    "ABDUL MAN'AM SAIYID", "ABDUL MANAN", "SAIYID ABD AL-MAN", "ABDUL MANAN AGHA",
    "ABDUL GHAFFAR QURESHI", "ABDUL GHAFAR QURISHI ABDUL GHANI", "MALIK ZAFAR IQBAL",
    "MALIK ZAFAR IQBAL SHAHBAZ", "MALIK ZAFAR IQBAL SHEHBAZ", "MUHAMMAD ZAFAR IQBAL",
    "ZAFAR IQBAL CHAUDHRY", "ZAFFER IQBAL", "ZAFAR IQBAL", "NAZAR MOHAMMAD",
    "NAZIR MOHAMMAD ABDUL BASIR", "ABU HAMZA", "ABU HAMZA", "ABU HAMZA AL-MASRI",
    "ABU HAMZA AL-MISRI", "ADAM RAMSEY EAMAN", "KAMEL MUSTAPHA MUSTAPHA", "MOSTAFA KAMEL MOSTAFA",
    "MUSTAFA KAMEL MUSTAFA", "MUSTAPHA KAMEL MUSTAPHA", "MOSTAFA KAMEL MOSTAFA IBRAHIM",
    "ABDUL QADIR", "ABDUL QADIR BASIR", "ABDUL QADIR HAQQANI", "AHMAD HAJI",
    "ABDUL QADEER BASIR ABDUL BASEER", "MAJEED CHAUDHRY ABDUL", "MAJEED, ABDUL", "MAJID, ABDUL",
    "MAJEED ABDUL CHAUDHRY", "ABU AL-KHAYR", "ABU JIHAD", "AHMAD HASAN",
    "ABD ALLAH MOHAMED RAGAB ABDEL RAHMAN", "ABU MUSAB", "ISNILON HAPILUN", "ISNILUN HAPILUN",
    "SALAHUDIN", "TUAN ISNILON", "ISNILON TOTONI HAPILON", "ABDUL GHANI BARADAR",
    "MULLAH BARADAR AKHUND", "ABDUL GHANI BARADAR ABDUL AHMAD TURK", "ABDELHAMID AL KURDI",
    "MOHAMMAD TAHIR HAMMID HUSSEIN", "ABD AL-HADI AL-ANSARI", "ABD AL-HADI AL-IRAQI",
    "ABD AL-MUHAYMAN", "ABDAL AL-HADI AL-IRAQI", "ABDUL HADI AL-TAWEEL", "ABDUL HADI ARIF ALI",
    "ABU ABDALLAH", "ABU AYUB", "OMAR UTHMAN MOHAMMED", "NASHWAN ABD AL-RAZZAQ ABD AL-BAQI",
    "AZIZIRAHMAN ABDUL AHAD", "SALEM AHMED SALEM HAMDAN", "SAQAR AL JADAWI", "SAQAR ALJADAWI",
    "SAQR AL-JADDAWI", "SALIM AHMAD SALIM HAMDAN", "MOHAMMAD SHOLEH IBRAHIM",
    "MUHAMMAD SHOLEH IBRAHIM", "ABDELHAMID ABOU ZEID", "ABID HAMMADOU", "ABOU ABDELLAH",
    "YOUCEF ADEL", "AMOR MOHAMED GHEDEIR", "ABDUL ROSYID RIDHO BAASYIR", "ABDUL AZIZ MAHSUD",
    "ABDUL AZIZ ABBASIN", "ABDALLAH AL-JAZAIRI", "ABDERAHMANE", "OMAR GHARIB",
    "SAID MOHAMED ARIF", "SLIMANE CHABANI", "SOULEIMAN", "SAID ARIF", "ABU SEIF",
    "ABU SEIF AL-JAWI", "WIJI JOKO SANTOSO", "WIJIJOKO SANTOSO", "WIJI JOKO SANTOSO", "ABU ZAHRA",
    "PAK ZAHRA", "BAMBANG SUKIRNO", "ANGGA DIMAS PERSADA", "ANGGA DIMAS PERSADHA",
    "ANGGA DIMAS PESHADA", "ANGGA DIMAS PRASONDHA", "ANGGA DIMAS PERSHADA", "ABDUL KARIM",
    "ABU SYEKH", "ANIS ALAWI JAFAR", "ARSALAN", "MIKE", "UMAR", "UMAR ARAB", "UMAR KECIL",
    "UMAR PATEK", "UMAR SYEH", "ZACKY", "HISYAM ALIZEINN", "ABU RUSYDAN", "HAMZAH", "THORIQUN",
    "TAUFIK RIFKI", "ARIS MUNANDAR", "GUN GUN RUSMAN GUNAWAN", "AGUS DWIKARNA",
    "ABDUL RAHIM BAASYIR", "ABDUS SAMAD", "ABU BAKAR BAASYIR bin ABUD BAASYIR",
    "MOCHAMMAD ACHWAN", "ABDUL MUTHANA", "ABU AL-YEMENI MUTHANA", "ABU MUTHANA",
    "ABU MUTHANNA", "NASIR MUTHANA", "NASSER AHMED MUTHANA", "UMM LAYTH", "AQSA MAHMOOD",
    "ABOU ABDALLAH AL FARANSI", "MAXIME HAUCHARD", "PETER CHERIF", "ABDUL RAHMAN",
    "ABU JIBRIL ABDURRAHMAN", "FIHIRUDDIN MUQTI", "FIKIRUDDIN MUQTI", "MOHAMAD IQBAL",
    "FIHIR", "AHMAD, ABU BAKR", "AHMED THE TANZANIAN", "AHMED, A", "AHMED, ABUBAKAR",
    "AHMED, ABUBAKAR K.", "AHMED, ABUBAKAR KHALFAN", "AHMED, ABUBAKARY K.",
    "AHMED, AHMED KHALFAN", "AL TANZANI, AHMAD", "ALI, AHMED KHALFAN", "BAKR, ABU", "FOOPIE",
    "FUPI", "GHAILANI, ABUBAKARY KHALFAN AHMED", "GHAILANI, AHMED", "GHILANI, AHMAD KHALAFAN",
    "HAYTHEM AL-KINI", "HUSSEIN, MAHAFUDH ABUBAKAR AHMED ABDALLAH", "KHABAR, ABU",
    "KHALFAN, AHMED", "MOHAMMED, SHARIFF OMAR", "AHMED KHALFAN GHAILANI",
    "MUHAMMAD RICKY ARDHAN", "MUHAMMAD JIBRIL ABDURRAHMAN", "SAYYED MOHAMMAD HAQQANI",
    "SAYYED MOHAMMED HAQQANI", "ABOU AL MOUKATEL", "ABOU MOUQATEL", "ABU-MUQATIL AL-TUNISI",
    "BOUBAKER EL HAKIM", "BOUBAKEUR EL-HAKIM", "EL HAKIM BOUBAKEUR",
    "BOUBAKER BEN HABIB BEN AL-HAKIM", "Dr. ALIM GHAIR", "Dr. NASEER HAQQANI", "NASEER HAQQANI",
    "NASERUDDIN", "NASHIR HAQQANI", "NASSIR HAQQANI", "NASIRUDDIN HAQQANI",
    "MOHAMMAD SALIM HAQQANI", "ABDUL HADI YASIN", "MOCHTAR YASIN MAHMUD", "MUHAMAD MUBAROK",
    "MUHAMMAD SYAWAL", "SALIM YASIN", "YASSIN SYWAL", "KHALEEL HAQQANI",
    "KHALIL AL-RAHMAN HAQQANI", "KHALIL UR RAHMAN HAQQANI", "KHALIL AHMED HAQQANI", "ABU FATHI",
    "ABU FATIH", "IBNU", "IBNU TOYIB", "THOYIB", "ABDULLAH ANSHORI",
    "SALEH PARLINDUNGAN SIREGAR", "SIREGAR PARLIN", "PARLINDUNGAN SIREGAR",
    "JALALUDDIN HAQANI", "JALLALOUDDIN HAQQANI", "JALLALOUDDINE HAQANI", "JALALUDDIN HAQQANI",
    "ABU UQLAH AL-KUWAITI", "HAMAD AWAD DAHI SARHAN AL-SHAMMARI", "IADENA MOHAMMAD",
    "QARI DIN MOHAMMAD", "DIN MOHAMMAD HANIF", "GUL AHMAD HAKIMI", "HANAFI SAHIB",
    "ROSTAM NURISTANI", "RUSTUM HANAFI HABIBULLAH", "BAKHT GUL BAHAR", "BAKHTA GUL", "SHUQIB",
    "BAKHT GUL", "ABOU FARES AL LIBI", "SUFYAN BIN QUMU", "SOFIANE BEN GOUMO",
    "MOHAMMED OMAR GHULAM NABI", "ABOU OMAR AL TOUNISI", "TARAK BEN TAHER BEN FALEH OUNI HARZI",
    "AREFULLAH AREF", "AREFULLAH AREF GHAZI MOHAMMAD", "OMAR EL MOUHAJER", "SABER",
    "SAMI BEN KHAMIS BEN SALEH ELSSEID", "ARIF SUNARNO", "ARIS SUMARSONO",
    "ustad DAUD ZULKARNAEN", "ZULKARMAIN", "ZULKARMAN", "ZULKARMIN", "ZULKARNAEN",
    "MOHAMMAD SHAFIQ AHMADI", "MULLAH SHAFIQULLAH", "MOHAMMAD SHAFIQULLAH AHMADI FATIH KHAN",
    "ABDEL KHADER MAHMOUD MOHAMED EL SAYED", "ES SAYED, KADER",
    "ABD EL KADER MAHMOUD MOHAMED EL SAYED", "FAIZ", "MUHAMMAD AZAMI", "MOHAMMAD AZAM ELMI",
    "NIK MOHAMMAD", "NIK MOHAMMAD DOST MOHAMMAD", "ABOU ZOUBAIR",
    "ALI BEN TAHER BEN FALEH OUNI HARZI", "DOOST MOHAMMAD", "DOST MOHAMMAD", "FAZAL HAYAT",
    "MULLAH FAZLULLAH", "MULLAH RADIO", "MAULANA FAZLULLAH", "SHAHABUDDIN DELAWAR", "GURG",
    "MOHAMMAD RASUL AYYUB", "MOUNIR EL MOUTASSADEQ", "MOUNIR EL MOTASSADEQ", "ABDUL BAQI",
    "ABDUL BAQI BASIR AWAL SHAH", "ABU HUDHAYFAH", "ABU UMAR", "ABU UMAR AL-SHISHANI",
    "CHECHEN OMAR", "OMAR AL-SHISHANI", "OMAR SHISHANI", "OMAR THE CHECHEN",
    "OMER THE CHECHEN", "TARKHAN BATIRASHVILI", "TARKHAN TAYUMURAZOVICH BATYRASHVILI",
    "UMAR SHISHANI", "UMAR THE CHECHEN", "TARKHAN TAYUMURAZOVICH BATIRASHVILI",
    "HAJI MUDIR", "MOHAMMAD TAHER ANWARI", "MOHAMMAD TAHRE ANWARI", "MUHAMMAD TAHIR ANWARI",
    "MUHAMMAD TAHER ANWARI", "ABDELRAHMAN", "REDOUANE EL HABHAB", "HAMDULLAH ALLAH NOOR",
    "ABDUL HABIB", "AGHA JAN ALAZAI", "AGHA JAN ALIZAI", "HAJI AGHA JAN ALIZAI", "HAJI LOI LALA",
    "HAJJI AGHA JAN", "LOI AGHA", "ABDUL HABIB ALIZAI", "MOHAMMAD ISHAQ AKHUND",
    "MOHAMMAD ESHAQ AKHUNZADA", "OMSEN", "OUMAR OMSEN", "OUMAR DIABY", "EHSANULLAH SARFADI",
    "EHSANULLAH SARFIDA", "EHSANULLAH SARFIDA HESAMUDDIN AKHUNDZADA",
    "KEVIN JORDAN AXEL GUIAVARCH", "EMILIE SAMRA KONIG", "EMILIE EDWIGE KONIG",
    "'ABD AL-RAHMAN MUHAMMAD MUSTAFA SHAYKHLARI", "ABDUL RAHMAN MUHAMMAD AL-BAYATI",
    "ABU ALA", "ABU HASAN", "ABU IMAN", "ABU MUHAMMAD", "ABU ZAYNA", "ABU-SHUAYB",
    "ALIAZRA RA’AD AHMAD", "HAJJI IMAN", "TAHIR MUHAMMAD KHALIL MUSTAFA AL-BAYATI",
    "UMAR MUHAMMAD KHALIL MUSTAFA", "ABD AL-RAHMAN MUHAMMAD MUSTAFA AL-QADULI"
]

# Initial Page Setup
set_page_visuals("fds")

db = connect_db()

list_pjp_dki = get_pjp_jkt(db)
list_blacklisted = get_blacklisted_country(db, True)
list_greylisted = get_greylisted_country(db, True)
list_sus_person = get_sus_peoples(db)

list_code_blacklisted = []
for country in list_blacklisted:
    list_code_blacklisted.append(country['code'])

list_code_greylisted = []
for country in list_greylisted:
    list_code_greylisted.append(country['code'])

list_name_sus_person = []
for person in list_sus_person:
    list_name_sus_person.append(person['name'])

if "date_submitted" not in st.session_state:
    st.session_state["date_submitted"] = False
if "uploaded_files" not in st.session_state:
    st.session_state["uploaded_files"] = None
if "models" not in st.session_state:
    try:
        st.session_state["models"] = load_models()
    except Exception as e:
        st.error(f"Error loading models: {e}")
        st.session_state["models"] = None

models = st.session_state.get("models", None)

current_year = datetime.now().year
current_month = datetime.now().month - 1

placeholder = st.empty()

with placeholder.form(key="date_form"):
    year = st.number_input(
        "Enter a year:",
        min_value=0,
        max_value=9999,
        value=current_year,
        step=1
    )

    month = st.selectbox(
        "Enter a month:",
        options=['January', 'February', 'March', 'April', 'May', 'June', 'July',
                 'August', 'September', 'October', 'November', 'December'],
        index=current_month
    )

    submitted = st.form_submit_button("Submit")
    if submitted:
        st.session_state["date_submitted"] = True
        st.session_state["selected_year"] = year
        st.session_state["selected_month"] = month
        placeholder.empty()

success_placeholder = st.empty()

if st.session_state["date_submitted"] and not st.session_state["uploaded_files"]:
    success_placeholder.success("Tahun dan Bulan berhasil dipilih.")

if st.session_state["date_submitted"]:
    st.session_state["uploaded_files"] = st.file_uploader(
        "Upload Transaction Data",
        accept_multiple_files=True,
        type=["parquet", "xlsx", "xls"]
    )
    placeholder.empty()

if st.session_state["uploaded_files"]:
    success_placeholder.empty()
    uploaded_files = st.session_state["uploaded_files"]
    try:
        list_pjp_code_dki = []
        for pjp in list_pjp_dki:
            list_pjp_code_dki.append(pjp['code'])

        df = read_parquets(uploaded_files)

        # Sanitize text columns to avoid rendering/wrapping errors due to invalid encodings/control chars
        def _clean_text(val):
            try:
                if pd.isna(val):
                    return val
                s = str(val)
                # Normalize Unicode (compatibility decomposition -> composition)
                try:
                    s = unicodedata.normalize("NFKC", s)
                except Exception:
                    pass
                # Replace NBSP with normal space
                s = s.replace("\u00A0", " ")
                # Remove control characters and non-printable ranges
                s = re.sub(r"[\u0000-\u001F\u007F-\u009F]", "", s)
                # Remove zero-width and BOM/word joiners
                s = re.sub(r"[\u200B\u200C\u200D\u2060\uFEFF]", "", s)
                # Remove bidi control chars and line/paragraph separators
                s = re.sub(r"[\u2028\u2029\u202A-\u202E\u2066-\u2069\u200E\u200F]", "", s)
                # Remove Unicode replacement character explicitly
                s = s.replace("\uFFFD", "")
                # Strip stray surrogate code units if any (defensive)
                s = re.sub(r"[\uD800-\uDFFF]", "", s)
                # Strip stray surrogate code units if any (defensive)
                s = s.encode("utf-8", errors="ignore").decode("utf-8", errors="ignore")
                return s
            except Exception:
                # If anything goes wrong, fallback to safe string casting
                try:
                    return str(val)
                except Exception:
                    return ""

        # Apply cleaning only to object/string dtype columns
        for col in df.columns:
            if df[col].dtype == object or str(df[col].dtype).startswith("string"):
                df[col] = df[col].map(_clean_text)

        df = df[df['SANDI_PELAPOR'].isin(list_pjp_code_dki)]
        df.index += 1

        # Determine the report type based on FORM_NO
        form_no = df['FORM_NO'].iloc[0]
        if form_no == "FORMG0001":
            df_blacklisted_filter = df[df['NEGARA_TUJUAN'].isin(list_code_blacklisted)]
            df_greylisted_filter = df[df['NEGARA_TUJUAN'].isin(list_code_greylisted)]
            df_suspected_person_filter = df[
                (df['NAMA_PENERIMA'].str.lower().isin([name.lower() for name in list_name_sus_person])) |
                (df['NAMA_PENGIRIM'].str.lower().isin([name.lower() for name in list_name_sus_person]))
                ]
            negara_text = "ke"
            tipe_laporan = "Outgoing"
            list_model_name = {1 : "isolation_forest_model_out_1.joblib", 2 : "isolation_forest_model_out_2.joblib",
                               3 : "isolation_forest_model_out_3.joblib"}
            predict_cols = ['FREKUENSI', 'NOMINAL_TRX', 'TUJUAN']
            selected_model = get_ml_model(tipe_laporan, models)  # dict {nama file : model}
            df_split = split_df(df, tipe_laporan)
        elif form_no == "FORMG0002":
            df_blacklisted_filter = df[df['NEGARA_ASAL'].isin(list_code_blacklisted)]
            df_greylisted_filter = df[df['NEGARA_ASAL'].isin(list_code_greylisted)]
            df_suspected_person_filter = df[
                (df['NAMA_PENERIMA'].str.lower().isin([name.lower() for name in list_name_sus_person])) |
                (df['NAMA_PENGIRIM'].str.lower().isin([name.lower() for name in list_name_sus_person]))
                ]
            negara_text = "dari"
            tipe_laporan = "Incoming"
            list_model_name = ["isolation_forest_model_inc.joblib"]
            predict_cols = ['FREKUENSI', 'NOMINAL_TRX']
            selected_model = get_ml_model(tipe_laporan, models)
            df_split = None
        else:
            df_blacklisted_filter = None
            df_greylisted_filter = None
            negara_text = None
            df_suspected_person_filter = df[
                (df['NAMA_PENERIMA'].str.lower().isin([name.lower() for name in list_name_sus_person])) |
                (df['NAMA_PENGIRIM'].str.lower().isin([name.lower() for name in list_name_sus_person]))
                ]
            tipe_laporan = "Domestik"
            list_model_name = { 1 : "isolation_forest_model_dom_1.joblib", 2 : "isolation_forest_model_dom_2.joblib",
                                3 : "isolation_forest_model_dom_3.joblib"}
            predict_cols = ['FREKUENSI_PENGIRIMAN', 'NOMINAL_TRX', 'TUJUAN_TRX']
            selected_model = get_ml_model(tipe_laporan, models)
            df_split = split_df(df, tipe_laporan)

        st.success("Data berhasil terbaca!")
        st.markdown(f"## Laporan Analisis Transaksi {tipe_laporan} ({st.session_state['selected_month']}, "
                    f"{st.session_state['selected_year']})")
        st.dataframe(df)
        st.divider()
        st.markdown(f"### Informasi Data Transaksi")

        # Filter df
        list_pjp = get_pjp_jkt(db)

        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**Jumlah Data Transaksi**: {len(df):,}")

        if df_split:
            for key in df_split.keys():
                selected_model_name = list_model_name.get(key)
                model_predict = selected_model.get(selected_model_name)
                selected_df_split = df_split[key][predict_cols].copy()
                original_index = df_split[key].index
                predictions = model_predict.predict(selected_df_split)
                negative_predictions_count = sum(pred == -1 for pred in predictions)
                df.loc[original_index, 'PREDICTED'] = predictions
        else:
            model_predict = selected_model.get(list_model_name[0])
            predictions = model_predict.predict(df[predict_cols])
            df['PREDICTED'] = predictions
        negative_predictions = df[df['PREDICTED'] == -1]
        negative_predictions['PREDICTED'] = negative_predictions['PREDICTED'].replace(-1, 'TKM')
        negative_predictions = negative_predictions.reset_index(drop=True)
        negative_predictions.index += 1
        formatted_number = f"{len(negative_predictions):,}".replace(',', '.')
        st.warning(f"Ditemukan {formatted_number} transaksi yang diduga mencurigakan.")
        st.dataframe(negative_predictions)
        st.divider()

        # Tampilkan Greylisted (ringkasan PJP & Negara) tepat di bawah Transaksi Mencurigakan dan sebelum Fuzzy
        if df_greylisted_filter is not None and not df_greylisted_filter.empty:
            st.markdown(f"### Informasi Transaksi yang dilakukan {negara_text} Negara Greylisted")
            list_pjp_name = get_pjp_suspected_blacklisted_greylisted(df_greylisted_filter, list_pjp_dki)
            pjp_counts = Counter(list_pjp_name)

            if form_no == "FORMG0001":
                list_unique_participating_countries = sorted(list(set(df_greylisted_filter['NEGARA_TUJUAN'])))
            else:
                list_unique_participating_countries = sorted(list(set(df_greylisted_filter['NEGARA_ASAL'])))

            list_participating_country = get_country_participated(db, list_unique_participating_countries)

            pjp_df = pd.DataFrame(pjp_counts.items(), columns=["PJP Name", "Count"])
            pjp_df = pjp_df.sort_values(by="Count", ascending=False).reset_index(drop=True)
            st.write(f"**Jumlah Data Transaksi**: {len(df_greylisted_filter):,}")
            df_greylisted_filter = df_greylisted_filter.reset_index(drop=True)
            df_greylisted_filter.index += 1
            df_greylisted = st.data_editor(
                df_greylisted_filter,
                key="df_greylisted_top"
            )
            col1, col2 = st.columns(2)
            with col1:
                st.write("**PJP Terlibat:**")
                st.data_editor(
                    pjp_df,
                    hide_index=True,
                    column_config={
                        "PJP Name": "Nama Penyelenggara",
                        "Count": "Jumlah TKM"
                    },
                    use_container_width=True
                )
            with col2:
                st.write("**Negara Terlibat:**")
                st.data_editor(
                    list_participating_country,
                    hide_index=True,
                    column_config={
                        "code": "Kode Negara",
                        "name": "Nama Negara"
                    },
                    use_container_width=True
                )
            # Tabel tambahan: baris Greylisted dengan Nama Pengirim kosong/tidak valid
            if "NAMA_PENGIRIM" in df_greylisted_filter.columns:
                st.markdown("#### Data Greylisted: Nama Pengirim Kosong/Tidak Valid")
                sender_series = df_greylisted_filter["NAMA_PENGIRIM"].astype("string")
                # Normalisasi sederhana untuk mendeteksi konten tidak terlihat
                norm_sender = sender_series.fillna("").str.upper().str.replace(r"[^A-Z0-9]+", "", regex=True).str.strip()
                raw_sender = sender_series.fillna("").str.strip()

                placeholders = {"NA", "N/A", "UNKNOWN", "-", "--", ".", "..."}
                mask_null = df_greylisted_filter["NAMA_PENGIRIM"].isna()
                mask_empty = raw_sender.eq("") | norm_sender.eq("")
                mask_flag = norm_sender.isin({"NO_LASTNAME_FLAG", "NOLASTNAMEFLAG"})
                mask_placeholders = raw_sender.str.upper().isin(placeholders)
                invalid_mask = mask_null | mask_empty | mask_flag | mask_placeholders

                df_greylisted_sender_invalid = df_greylisted_filter[invalid_mask].copy()
                if not df_greylisted_sender_invalid.empty:
                    st.write(f"Ditemukan {len(df_greylisted_sender_invalid):,} baris dengan Pengirim kosong/tidak valid.")
                    df_greylisted_sender_invalid = df_greylisted_sender_invalid.reset_index(drop=True)
                    df_greylisted_sender_invalid.index += 1
                    st.data_editor(
                        df_greylisted_sender_invalid,
                        key="df_greylisted_sender_invalid",
                        use_container_width=True
                    )
                else:
                    st.info("Tidak ditemukan baris Greylisted dengan Nama Pengirim kosong/tidak valid.")
            # Tabel tambahan: baris Greylisted dengan Nama Pengirim dan Nama Penerima sama
            if ("NAMA_PENGIRIM" in df_greylisted_filter.columns) and ("NAMA_PENERIMA" in df_greylisted_filter.columns):
                st.markdown("#### Data Greylisted: Nama Pengirim dan Nama Penerima Sama")
                sender_series2 = df_greylisted_filter["NAMA_PENGIRIM"].astype("string")
                receiver_series2 = df_greylisted_filter["NAMA_PENERIMA"].astype("string")

                # Normalisasi: uppercase, hapus non-alfanumerik, hapus spasi, lalu bandingkan
                norm_sender2 = sender_series2.fillna("").str.upper().str.replace(r"[^A-Z0-9]+", "", regex=True).str.strip()
                norm_receiver2 = receiver_series2.fillna("").str.upper().str.replace(r"[^A-Z0-9]+", "", regex=True).str.strip()

                raw_sender2 = sender_series2.fillna("").str.strip()
                raw_receiver2 = receiver_series2.fillna("").str.strip()

                placeholders2 = {"NA", "N/A", "UNKNOWN", "-", "--", ".", "..."}
                invalid_sender2 = df_greylisted_filter["NAMA_PENGIRIM"].isna() | raw_sender2.eq("") | norm_sender2.eq("") | norm_sender2.isin({"NO_LASTNAME_FLAG", "NOLASTNAMEFLAG"}) | raw_sender2.str.upper().isin(placeholders2)
                invalid_receiver2 = df_greylisted_filter["NAMA_PENERIMA"].isna() | raw_receiver2.eq("") | norm_receiver2.eq("") | norm_receiver2.isin({"NO_LASTNAME_FLAG", "NOLASTNAMEFLAG"}) | raw_receiver2.str.upper().isin(placeholders2)

                same_mask = (norm_sender2 == norm_receiver2) & (~norm_sender2.eq("")) & (~invalid_sender2) & (~invalid_receiver2)
                df_greylisted_same_names = df_greylisted_filter[same_mask].copy()
                if not df_greylisted_same_names.empty:
                    st.write(f"Ditemukan {len(df_greylisted_same_names):,} baris dengan Nama Pengirim dan Nama Penerima sama.")
                    df_greylisted_same_names = df_greylisted_same_names.reset_index(drop=True)
                    df_greylisted_same_names.index += 1
                    st.data_editor(
                        df_greylisted_same_names,
                        key="df_greylisted_same_names",
                        use_container_width=True
                    )
                else:
                    st.info("Tidak ditemukan baris Greylisted dengan Nama Pengirim dan Nama Penerima sama.")
            st.divider()

        # ========== Deteksi Pola Fraud: Pengirim -> >1 Penerima dengan Nominal Mirip (per Periode) ==========
        # Kriteria:
        # - Periode: gunakan YYYY-MM dari kolom tanggal 8 digit (prioritas 'Form_Period' jika ada).
        # - Satu pengirim ke >1 penerima unik dalam 1 bulan.
        # - Nominal mirip: (max-min) < 100.000 ATAU (max-min) < 1% dari rata-rata.
        try:
            st.markdown("### Deteksi Pola Fraud: Pengirim → >1 Penerima dengan Nominal Mirip (per Periode)")

            with st.spinner("Memproses deteksi pola..."):
                df_tmp = df.copy()
                # Simpan Row Index asli (saat ini index sudah 1-based di app)
                df_tmp["_ROW_INDEX"] = df_tmp.index

                # 1) Normalisasi kolom periode ke 'Periode' (YYYY-MM)
                period_col = None
                if "Form_Period" in df_tmp.columns:
                    period_col = "Form_Period"
                else:
                    # fallback: cari kolom string yang tampak seperti 8 digit tanggal
                    cand_cols = [
                        c for c in df_tmp.columns
                        if df_tmp[c].dtype == object or str(df_tmp[c].dtype).startswith("string")
                    ]
                    for c in cand_cols:
                        try:
                            vals = df_tmp[c].astype(str).str.replace(r"\D", "", regex=True)
                            if vals.str.match(r"^\d{8}$").any():
                                period_col = c
                                break
                        except Exception:
                            continue
                if period_col is not None:
                    vals = df_tmp[period_col].astype(str).str.replace(r"\D", "", regex=True)
                    mask8 = vals.str.match(r"^\d{8}$")
                    periode = pd.Series(pd.NA, index=df_tmp.index, dtype="string")
                    periode.loc[mask8] = vals.loc[mask8].str.slice(0, 4) + "-" + vals.loc[mask8].str.slice(4, 6)
                    df_tmp["Periode"] = periode
                else:
                    df_tmp["Periode"] = pd.NA

                # 2) Normalisasi kolom nama pengirim/penerima dan nominal
                pengirim_col = "Nama_Pengirim" if "Nama_Pengirim" in df_tmp.columns else ("NAMA_PENGIRIM" if "NAMA_PENGIRIM" in df_tmp.columns else None)
                penerima_col = "Nama_Penerima" if "Nama_Penerima" in df_tmp.columns else ("NAMA_PENERIMA" if "NAMA_PENERIMA" in df_tmp.columns else None)
                nominal_col = "Nominal_TRX" if "Nominal_TRX" in df_tmp.columns else ("NOMINAL_TRX" if "NOMINAL_TRX" in df_tmp.columns else None)

                if not all([pengirim_col, penerima_col, nominal_col]):
                    st.info("Kolom yang dibutuhkan (Nama_Pengirim/NAMA_PENGIRIM, Nama_Penerima/NAMA_PENERIMA, Nominal_TRX/NOMINAL_TRX) tidak lengkap untuk deteksi pola ini.")
                else:
                    # Konversi nominal ke integer: buang non-digit
                    nom_str = df_tmp[nominal_col].astype(str).str.replace(r"[^0-9]", "", regex=True)
                    df_tmp["Nominal_TRX_int"] = pd.to_numeric(nom_str, errors="coerce").astype("Int64")

                    # Filter baris yang valid untuk perhitungan
                    base_mask = (
                        df_tmp["Periode"].notna() &
                        df_tmp[pengirim_col].notna() & (df_tmp[pengirim_col].astype(str).str.strip() != "") &
                        df_tmp[penerima_col].notna() & (df_tmp[penerima_col].astype(str).str.strip() != "") &
                        df_tmp["Nominal_TRX_int"].notna()
                    )
                    df_work = df_tmp.loc[base_mask, [
                        "Periode", pengirim_col, penerima_col, "Nominal_TRX_int", "_ROW_INDEX"
                    ]].copy()

                    if df_work.empty:
                        st.info("Tidak ada data yang valid untuk deteksi pola ini.")
                    else:
                        results = []
                        # Group by Periode & Pengirim dengan progress bar dan ETA
                        grouped = list(df_work.groupby(["Periode", pengirim_col], dropna=False))
                        total_groups = len(grouped)
                        prog = st.progress(0, text="Mengolah grup (fan-out)...")
                        eta_placeholder = st.empty()
                        start_time = time.time()
                        for idx, ((periode, pengirim), g) in enumerate(grouped, start=1):
                            # Daftar penerima unik
                            penerima_list = (
                                g[penerima_col].astype(str).str.strip().replace("", pd.NA).dropna().unique().tolist()
                            )
                            # Daftar penerima semua baris (tanpa deduplikasi)
                            penerima_semua = g[penerima_col].astype(str).str.strip().tolist()
                            jml_penerima = len(penerima_list)

                            # Daftar nominal & indeks baris
                            nom_list = g["Nominal_TRX_int"].dropna().astype(int).tolist()
                            row_idx = g["_ROW_INDEX"].tolist()

                            if jml_penerima > 1 and len(nom_list) >= 2:
                                arr = np.array(nom_list, dtype=np.int64)
                                rng = int(arr.max() - arr.min())
                                avg = float(arr.mean()) if arr.size > 0 else 0.0
                                identik = bool(arr.size > 0 and np.all(arr == arr[0]))
                                similar = identik or (rng < 100_000) or (rng < 0.01 * avg)
                                if similar:
                                    if identik:
                                        ket = "Identik"
                                    elif rng < 100_000:
                                        ket = "Range < 100k"
                                    elif rng < 0.01 * avg:
                                        ket = "Range < 1% rata-rata"
                                    else:
                                        ket = "Mirip"
                                    results.append({
                                        "Periode": periode,
                                        "Nama_Pengirim": pengirim,
                                        "Jumlah_Penerima_Unique": jml_penerima,
                                        "Daftar_Penerima": penerima_list,
                                        "Daftar_Penerima_Semua": penerima_semua,
                                        "Daftar_Nominal": nom_list,
                                        "Row_Index": row_idx,
                                        "Flag": "Suspicious",
                                        "Keterangan_Kemiripan": ket,
                                    })
                            # update progress & ETA
                            elapsed = time.time() - start_time
                            rate = elapsed / idx if idx > 0 else 0
                            remaining = (total_groups - idx) * rate
                            prog.progress(min(idx / total_groups, 1.0), text=f"Mengolah grup (fan-out)... {idx}/{total_groups}")
                            eta_placeholder.caption(f"Perkiraan sisa waktu: {int(max(remaining,0)//60)} menit {int(max(remaining,0)%60)} detik")

                        prog.progress(1.0, text="Selesai (fan-out)")
                        eta_placeholder.empty()

                        suspicious_df = pd.DataFrame(results)
                        if not suspicious_df.empty:
                            st.write(f"Ditemukan {len(suspicious_df):,} group pengirim-periode dengan >1 penerima dan nominal mirip.")
                            st.data_editor(
                                suspicious_df,
                                key="df_suspicious_fanout_mirip",
                                hide_index=True,
                                use_container_width=True,
                                column_config={
                                    "Periode": "Periode (YYYY-MM)",
                                    "Nama_Pengirim": "Nama Pengirim",
                                    "Jumlah_Penerima_Unique": st.column_config.NumberColumn("Jumlah Penerima Unik", min_value=0),
                                    "Daftar_Penerima": "Daftar Penerima",
                                    "Daftar_Penerima_Semua": "Daftar Penerima (Semua Baris)",
                                    "Daftar_Nominal": "Daftar Nominal",
                                    "Row_Index": "Row Index Asli",
                                    "Flag": "Flag",
                                    "Keterangan_Kemiripan": "Keterangan",
                                }
                            )
                        else:
                            st.info("Tidak ditemukan pola pengirim → >1 penerima dengan nominal mirip pada periode yang sama.")
            st.divider()
        except Exception as _fanout_err:
            st.warning(f"Gagal melakukan deteksi pola pengirim → >1 penerima dengan nominal mirip: {_fanout_err}")

        # ========== Deteksi Pola Fraud: Penerima ← >1 Pengirim dengan Nominal Mirip/Identik (per Periode) ==========
        # Kriteria:
        # - Periode: gunakan YYYY-MM dari kolom tanggal 8 digit (prioritas 'Form_Period' jika ada).
        # - Satu penerima menerima dari >1 pengirim unik dalam 1 bulan.
        # - Nominal mirip: (max-min) < 100.000 ATAU (max-min) < 1% dari rata-rata, ATAU ada nominal identik antar pengirim.
        try:
            st.markdown("### Deteksi Pola Fraud: Penerima ← >1 Pengirim dengan Nominal Mirip/Identik (per Periode)")
            with st.spinner("Memproses deteksi pola fan-in..."):
                df_tmp2 = df.copy()
                df_tmp2["_ROW_INDEX"] = df_tmp2.index

                # Normalisasi Periode (YYYY-MM)
                period_col2 = None
                if "Form_Period" in df_tmp2.columns:
                    period_col2 = "Form_Period"
                else:
                    cand_cols2 = [
                        c for c in df_tmp2.columns
                        if df_tmp2[c].dtype == object or str(df_tmp2[c].dtype).startswith("string")
                    ]
                    for c in cand_cols2:
                        try:
                            vals = df_tmp2[c].astype(str).str.replace(r"\D", "", regex=True)
                            if vals.str.match(r"^\d{8}$").any():
                                period_col2 = c
                                break
                        except Exception:
                            continue
                if period_col2 is not None:
                    vals2 = df_tmp2[period_col2].astype(str).str.replace(r"\D", "", regex=True)
                    mask82 = vals2.str.match(r"^\d{8}$")
                    periode2 = pd.Series(pd.NA, index=df_tmp2.index, dtype="string")
                    periode2.loc[mask82] = vals2.loc[mask82].str.slice(0, 4) + "-" + vals2.loc[mask82].str.slice(4, 6)
                    df_tmp2["Periode"] = periode2
                else:
                    df_tmp2["Periode"] = pd.NA

                penerima_col2 = "Nama_Penerima" if "Nama_Penerima" in df_tmp2.columns else ("NAMA_PENERIMA" if "NAMA_PENERIMA" in df_tmp2.columns else None)
                pengirim_col2 = "Nama_Pengirim" if "Nama_Pengirim" in df_tmp2.columns else ("NAMA_PENGIRIM" if "NAMA_PENGIRIM" in df_tmp2.columns else None)
                nominal_col2 = "Nominal_TRX" if "Nominal_TRX" in df_tmp2.columns else ("NOMINAL_TRX" if "NOMINAL_TRX" in df_tmp2.columns else None)

                if not all([penerima_col2, pengirim_col2, nominal_col2]):
                    st.info("Kolom yang dibutuhkan (Nama_Penerima/NAMA_PENERIMA, Nama_Pengirim/NAMA_PENGIRIM, Nominal_TRX/NOMINAL_TRX) tidak lengkap untuk deteksi pola ini.")
                else:
                    nom_str2 = df_tmp2[nominal_col2].astype(str).str.replace(r"[^0-9]", "", regex=True)
                    df_tmp2["Nominal_TRX_int"] = pd.to_numeric(nom_str2, errors="coerce").astype("Int64")

                    base_mask2 = (
                        df_tmp2["Periode"].notna() &
                        df_tmp2[penerima_col2].notna() & (df_tmp2[penerima_col2].astype(str).str.strip() != "") &
                        df_tmp2[pengirim_col2].notna() & (df_tmp2[pengirim_col2].astype(str).str.strip() != "") &
                        df_tmp2["Nominal_TRX_int"].notna()
                    )
                    df_work2 = df_tmp2.loc[base_mask2, [
                        "Periode", penerima_col2, pengirim_col2, "Nominal_TRX_int", "_ROW_INDEX"
                    ]].copy()

                    if df_work2.empty:
                        st.info("Tidak ada data yang valid untuk deteksi pola fan-in.")
                    else:
                        results2 = []
                        grouped2 = list(df_work2.groupby(["Periode", penerima_col2], dropna=False))
                        total_groups2 = len(grouped2)
                        prog2 = st.progress(0, text="Mengolah grup (fan-in)...")
                        eta_placeholder2 = st.empty()
                        start_time2 = time.time()
                        for idx2, ((periode_v, penerima_v), g2) in enumerate(grouped2, start=1):
                            pengirim_unique2 = (
                                g2[pengirim_col2].astype(str).str.strip().replace("", pd.NA).dropna().unique().tolist()
                            )
                            jml_pengirim2 = len(pengirim_unique2)

                            nom_list2 = g2["Nominal_TRX_int"].dropna().astype(int).tolist()
                            row_idx2 = g2["_ROW_INDEX"].tolist()

                            if jml_pengirim2 > 1 and len(nom_list2) >= 2:
                                arr2 = np.array(nom_list2, dtype=np.int64)
                                rng2 = int(arr2.max() - arr2.min())
                                avg2 = float(arr2.mean()) if arr2.size > 0 else 0.0
                                similar2 = (rng2 < 100_000) or (avg2 > 0 and rng2 < 0.01 * avg2)

                                # Nominal identik antar pengirim (ada nilai nominal yang dikirim >=2 pengirim berbeda)
                                g_nom_sender2 = g2[[pengirim_col2, "Nominal_TRX_int"]].dropna()
                                dup_across_senders2 = (g_nom_sender2.groupby("Nominal_TRX_int")[pengirim_col2].nunique() >= 2).any()

                                if similar2 or dup_across_senders2:
                                    results2.append({
                                        "Periode": periode_v,
                                        "Nama_Penerima": penerima_v,
                                        "Jumlah_Pengirim_Unique": jml_pengirim2,
                                        "Daftar_Pengirim": pengirim_unique2,
                                        "Daftar_Nominal": nom_list2,
                                        "Row_Index": row_idx2,
                                        "Flag": "Suspicious",
                                    })

                            # update progress & ETA
                            elapsed2 = time.time() - start_time2
                            rate2 = elapsed2 / idx2 if idx2 > 0 else 0
                            remaining2 = (total_groups2 - idx2) * rate2
                            prog2.progress(min(idx2 / total_groups2, 1.0), text=f"Mengolah grup (fan-in)... {idx2}/{total_groups2}")
                            eta_placeholder2.caption(f"Perkiraan sisa waktu: {int(max(remaining2,0)//60)} menit {int(max(remaining2,0)%60)} detik")

                        prog2.progress(1.0, text="Selesai (fan-in)")
                        eta_placeholder2.empty()

                        suspicious_df2 = pd.DataFrame(results2)
                        if not suspicious_df2.empty:
                            st.write(f"Ditemukan {len(suspicious_df2):,} group penerima-periode dengan >1 pengirim dan nominal mirip/identik.")
                            st.data_editor(
                                suspicious_df2,
                                key="df_suspicious_fanin_mirip",
                                hide_index=True,
                                use_container_width=True,
                                column_config={
                                    "Periode": "Periode (YYYY-MM)",
                                    "Nama_Penerima": "Nama Penerima",
                                    "Jumlah_Pengirim_Unique": st.column_config.NumberColumn("Jumlah Pengirim Unik", min_value=0),
                                    "Daftar_Pengirim": "Daftar Pengirim",
                                    "Daftar_Nominal": "Daftar Nominal",
                                    "Row_Index": "Row Index Asli",
                                    "Flag": "Flag",
                                }
                            )
                        else:
                            st.info("Tidak ditemukan pola penerima ← >1 pengirim dengan nominal mirip/identik pada periode yang sama.")
            st.divider()
        except Exception as _fanin_err:
            st.warning(f"Gagal melakukan deteksi pola penerima ← >1 pengirim dengan nominal mirip/identik: {_fanin_err}")


        # ======= Deteksi Rata-rata Nominal per Transaksi > 100.000.000 =======
        try:
            st.markdown("### Deteksi Rata-rata Nominal per Transaksi > 100.000.000")
            freq_col = None
            if "FREKUENSI" in df.columns:
                freq_col = "FREKUENSI"
            elif "FREKUENSI_PENGIRIMAN" in df.columns:
                freq_col = "FREKUENSI_PENGIRIMAN"

            if (freq_col is not None) and ("NOMINAL_TRX" in df.columns):
                df_avg = df.copy()
                df_avg["_NOMINAL_TRX"] = pd.to_numeric(df_avg["NOMINAL_TRX"], errors="coerce")
                df_avg["_FREK"] = pd.to_numeric(df_avg[freq_col], errors="coerce")
                # Hindari bagi 0 / NaN
                valid_mask = df_avg["_NOMINAL_TRX"].notna() & df_avg["_FREK"].notna() & (df_avg["_FREK"] > 0)
                df_avg_valid = df_avg[valid_mask].copy()
                df_avg_valid["RATA2_NOMINAL_PER_TRX"] = df_avg_valid["_NOMINAL_TRX"] / df_avg_valid["_FREK"]
                over_mask = df_avg_valid["RATA2_NOMINAL_PER_TRX"] > 100_000_000
                df_over_avg = df_avg_valid[over_mask].copy()
                if not df_over_avg.empty:
                    st.write(f"Ditemukan {len(df_over_avg):,} baris dengan rata-rata > 100.000.000.")
                    # Tambahan: deteksi kolom periode form (8 digit, format YYYYMMDD)
                    candidate_period_cols = [
                        c for c in df_over_avg.columns
                        if df_over_avg[c].dtype == object or str(df_over_avg[c].dtype).startswith("string")
                    ]
                    period_col = None
                    period_mask_map = {}
                    for c in candidate_period_cols:
                        try:
                            vals = df_over_avg[c].astype(str).str.replace(r"\D", "", regex=True)
                            mask8 = vals.str.match(r"^\d{8}$")
                            if mask8.any():
                                period_col = c
                                period_mask_map[c] = vals
                                break
                        except Exception:
                            continue

                    if period_col is not None:
                        vals = period_mask_map.get(period_col)
                        if vals is None:
                            vals = df_over_avg[period_col].astype(str).str.replace(r"\D", "", regex=True)
                        bulan_map = {
                            "01": "Januari", "02": "Februari", "03": "Maret", "04": "April",
                            "05": "Mei", "06": "Juni", "07": "Juli", "08": "Agustus",
                            "09": "September", "10": "Oktober", "11": "November", "12": "Desember"
                        }
                        valid8 = vals.str.match(r"^\d{8}$")
                        df_over_avg["FORM_PERIODE_RAW"] = df_over_avg[period_col]
                        df_over_avg.loc[valid8, "FORM_PERIODE_TAHUN"] = vals[valid8].str.slice(0, 4)
                        df_over_avg.loc[valid8, "FORM_PERIODE_BULAN"] = vals[valid8].str.slice(4, 6)
                        if "FORM_PERIODE_BULAN" in df_over_avg.columns:
                            df_over_avg["FORM_PERIODE_NAMA_BULAN"] = df_over_avg["FORM_PERIODE_BULAN"].map(bulan_map)
                        else:
                            df_over_avg["FORM_PERIODE_NAMA_BULAN"] = pd.NA

                    # Susun kolom yang ditampilkan: utamakan nominal, frekuensi, rata-rata
                    show_cols = []
                    for c in [x for x in ["NOMINAL_TRX", freq_col, "RATA2_NOMINAL_PER_TRX"] if x is not None]:
                        if c in df_over_avg.columns and c not in show_cols:
                            show_cols.append(c)
                    # Tambahkan kolom periode jika tersedia
                    for c in ["FORM_PERIODE_RAW", "FORM_PERIODE_BULAN", "FORM_PERIODE_NAMA_BULAN", "FORM_PERIODE_TAHUN"]:
                        if c in df_over_avg.columns and c not in show_cols:
                            show_cols.append(c)
                    # Tambahkan beberapa kolom identitas jika ada
                    for c in ["FORM_NO", "SANDI_PELAPOR", "NAMA_PENGIRIM", "NAMA_PENERIMA", "NEGARA_TUJUAN", "NEGARA_ASAL"]:
                        if c in df_over_avg.columns and c not in show_cols:
                            show_cols.append(c)
                    df_over_avg = df_over_avg.reset_index(drop=True)
                    df_over_avg.index += 1
                    st.data_editor(
                        df_over_avg[show_cols],
                        key="df_over_avg",
                        hide_index=False,
                        use_container_width=True,
                        column_config={
                            "NOMINAL_TRX": st.column_config.NumberColumn("Nominal Trx", min_value=0),
                            "RATA2_NOMINAL_PER_TRX": st.column_config.NumberColumn("Rata2/Trx", min_value=0),
                            "FORM_PERIODE_RAW": "Periode (Raw)",
                            "FORM_PERIODE_BULAN": "Bulan (Kode)",
                            "FORM_PERIODE_NAMA_BULAN": "Bulan (Nama)",
                            "FORM_PERIODE_TAHUN": "Tahun",
                        }
                    )
                else:
                    st.info("Tidak ada baris dengan rata-rata nominal per transaksi di atas 100.000.000.")
            else:
                st.info("Kolom frekuensi atau nominal transaksi tidak ditemukan untuk perhitungan rata-rata.")
            st.divider()
        except Exception as _avg_err:
            st.warning(f"Gagal menghitung rata-rata nominal per transaksi: {_avg_err}")


        if not df_suspected_person_filter.empty:
            st.markdown(f"### Informasi Transaksi dengan Nama Pengirim atau Nama Penerima Terduga")
            list_pjp_name = get_pjp_suspected_blacklisted_greylisted(df_suspected_person_filter, list_pjp_dki)
            pjp_counts = Counter(list_pjp_name)

            pjp_df = pd.DataFrame(pjp_counts.items(), columns=["PJP Name", "Count"])
            pjp_df = pjp_df.sort_values(by="Count", ascending=False).reset_index(drop=True)

            st.write(f"**Jumlah Data Transaksi**: {len(df_suspected_person_filter):,}")
            df_suspected_person_filter = df_suspected_person_filter.reset_index(drop=True)
            df_suspected_person_filter.index += 1
            df_sus_person = st.data_editor(
                df_suspected_person_filter,
                key="df_suspected_person"
            )
            st.write("**PJP Terduga:**")
            st.data_editor(
                pjp_df,
                hide_index=True,
                column_config={
                    "PJP Name": "Nama Penyelenggara",
                    "Count": "Jumlah TKM"
                },
                use_container_width=False
            )
            st.divider()
        # Tampilkan Blacklisted setelah Greylisted dan Fuzzy
        if df_blacklisted_filter is not None and not df_blacklisted_filter.empty:
            st.markdown(f"### Informasi Transaksi yang dilakukan {negara_text} Negara Blacklisted")
            list_pjp_name = get_pjp_suspected_blacklisted_greylisted(df_blacklisted_filter, list_pjp_dki)
            pjp_counts = Counter(list_pjp_name)

            if form_no == "FORMG0001":
                list_unique_participating_countries = sorted(list(set(df_blacklisted_filter['NEGARA_TUJUAN'])))
            else:
                list_unique_participating_countries = sorted(list(set(df_blacklisted_filter['NEGARA_ASAL'])))

            list_participating_country = get_country_participated(db, list_unique_participating_countries)
            pjp_df = pd.DataFrame(pjp_counts.items(), columns=["PJP Name", "Count"])
            pjp_df = pjp_df.sort_values(by="Count", ascending=False).reset_index(drop=True)
            st.write(f"**Jumlah Data Transaksi**: {len(df_blacklisted_filter):,}")
            df_blacklisted_filter = df_blacklisted_filter.reset_index(drop=True)
            df_blacklisted_filter.index += 1
            df_blacklisted = st.data_editor(
                df_blacklisted_filter,
                key="df_blacklisted"
            )
            col1, col2 = st.columns(2)
            with col1:
                st.write("**PJP Terlibat:**")
                st.data_editor(
                    pjp_df,
                    hide_index=True,
                    column_config={
                        "PJP Name": "Nama Penyelenggara",
                        "Count": "Jumlah TKM"
                    },
                    use_container_width=True
                )
            with col2:
                st.write("**Negara Terlibat:**")
                st.data_editor(
                    list_participating_country,
                    hide_index=True,
                    column_config={
                        "code": "Kode Negara",
                        "name": "Nama Negara"
                    },
                    use_container_width=True
                )
            st.divider()

        # ========== Fuzzy Matching (Paling Bawah) ==========
        ENABLE_FUZZY = False  # Ubah ke True untuk mengaktifkan kembali fitur Fuzzy
        if ENABLE_FUZZY:
            try:
                st.markdown("### Pencocokan Nama (Fuzzy) terhadap Daftar known_names — Bagian Paling Bawah")

                # Helper normalize
                def _norm(s: str) -> str:
                    s = (s or "").upper().strip()
                    s = re.sub(r"[^A-Z0-9 ]+", " ", s)
                    s = re.sub(r"\s+", " ", s).strip()
                    return s

                def _token_sort(s: str) -> str:
                    toks = [t for t in _norm(s).split(" ") if t]
                    return " ".join(sorted(toks))

                # Precompute
                KN = [(orig, _norm(orig), _token_sort(orig)) for orig in known_names]

                # Ambil nama unik dari pengirim & penerima
                uniq_pengirim = (
                    df["NAMA_PENGIRIM"].dropna().astype(str).str.strip().unique().tolist()
                    if "NAMA_PENGIRIM" in df.columns else []
                )
                uniq_penerima = (
                    df["NAMA_PENERIMA"].dropna().astype(str).str.strip().unique().tolist()
                    if "NAMA_PENERIMA" in df.columns else []
                )

                # Gabungkan dua set supaya proses sekali dengan peran
                tasks = [("PENGIRIM", n) for n in uniq_pengirim] + [("PENERIMA", n) for n in uniq_penerima]

                # Progress & ETA
                prog = st.progress(0, text="Menghitung fuzzy score...")
                eta = st.empty()
                start = time.time()

                cache = {}
                def best_match(name: str):
                    nrm = _norm(name)
                    if not nrm or len(nrm) < 3:
                        return ("", 0)
                    n_tok = _token_sort(nrm)
                    best_s, best_n = 0, ""
                    for orig, kn_nrm, kn_tok in KN:
                        r1 = SequenceMatcher(None, nrm, kn_nrm).ratio()
                        r2 = SequenceMatcher(None, n_tok, kn_tok).ratio()
                        score = int(round(100 * max(r1, r2)))
                        if score > best_s:
                            best_s, best_n = score, orig
                            if best_s == 100:
                                break
                    return (best_n, best_s)

                out_rows = []
                total = len(tasks)
                for i, (role, name) in enumerate(tasks, start=1):
                    if name in cache:
                        match_name, score = cache[name]
                    else:
                        match_name, score = best_match(name)
                        cache[name] = (match_name, score)
                    out_rows.append({
                        "Peran": role,
                        "Nama_Asli": name,
                        "Match_Dengan": match_name,
                        "Score": score,
                    })
                    # progress
                    elapsed = time.time() - start
                    rate = elapsed / i if i else 0
                    remain = (total - i) * rate
                    prog.progress(min(i / max(total, 1), 1.0), text=f"Menghitung fuzzy score... {i}/{total}")
                    eta.caption(f"Perkiraan sisa waktu: {int(max(remain,0)//60)} menit {int(max(remain,0)%60)} detik")

                prog.progress(1.0, text="Selesai fuzzy")
                eta.empty()

                fuzzy_df = pd.DataFrame(out_rows)
                if not fuzzy_df.empty:
                    # Terapkan ambang minimal 80
                    fuzzy_df = fuzzy_df[fuzzy_df["Score"] >= 80].copy()
                    fuzzy_df = fuzzy_df.sort_values(by=["Score"], ascending=False).reset_index(drop=True)

                    st.data_editor(
                        fuzzy_df,
                        key="df_fuzzy_bottom",
                        hide_index=True,
                        use_container_width=True,
                        column_config={
                            "Peran": "Peran (Pengirim/Penerima)",
                            "Nama_Asli": "Nama Dalam Data",
                            "Match_Dengan": "Cocok Dengan Nama",
                            "Score": st.column_config.NumberColumn("Skor", min_value=0, max_value=100),
                        }
                    )
                else:
                    st.info("Tidak ada nama untuk diproses fuzzy.")
                st.divider()
            except Exception as _fuzzy_err:
                st.warning(f"Gagal melakukan fuzzy matching: {_fuzzy_err}")
        else:
            st.markdown("### Pencocokan Nama (Fuzzy) terhadap Daftar known_names — Bagian Paling Bawah")
            st.info("Fitur Fuzzy sementara dinonaktifkan karena berat. Aktifkan kembali bila dibutuhkan.")
            st.divider()
    except Exception as e:
        st.error(f"Error processing files: {e}")
